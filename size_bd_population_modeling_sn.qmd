---
title: "Size vs. Bd modeling: Panam√° preliminary results"
author: Cob Staines
date: 2025-08-20
format:
  html:
    toc: true
df-print: kable
bibliography: references.bib
csl: ecology.csl
---
# Introduction

## Motivation

Patterns of greater Bd load in recently metamorphosed individuals have been documented in some cases[@adams_chytridiomycosis-induced_2020] [@humphries_immune_2022] [@humphries_chytridiomycosis_2024] [@humphries_chytridiomycosis_2025] (and the opposite pattern in others[@bradley_host_2019]), with possible implications for:

  - population dynamics (Q2)
  - assessing Bd resistance/tolerance mechanisms (Q3)
  - resilience trajectory assessment (Q1)

... with the goal of complementing ongoing RIBBiTR research efforts

## Working hypotheses:

  a. Younger individuals are more likely to be infected with Bd than older individuals across species
  b. Younger individuals are more likely to carry higher Bd loads than older individuals across species

# Methods
## Setup
```{r}
#| eval: true
#| output: false
#| code-fold: true
#| code-summary: "Show setup code"

# setup
librarian::shelf(tidyverse, dbplyr, here, janitor, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, brms, loo, bayesplot, tidybayes, ggplot2, ggpattern)

## Connect to DB
dbcon <- hopToDB("ribbitr")

# load populations
data_pop = read.csv(here("data", "sn_site_pop_2025-05-15.csv")) %>%
  rename(population = pop_id) %>%
  mutate(population = ifelse(!is.na(population), paste0(as.character(population), "_pop"), NA_character_))

# table pointers
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

bd_sample = db_sample %>%
  right_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(sample_type == "bd")
```

## Data selection
### Classifying by life stage
These analysis were carried out for post-metamorphic individuals only. Individuals were classified as "adult" or "subadult" with a threshold snout-vent-length (SVL [mm]), identified independently for each species from the literature (see data collection code for specific thresholds used and sources).

### Classification by season
The data were also classified into two seasons:

  - Lluvia (wet) -- May - August
  - Seca (dry) -- October - January

### Population selection criteria:
Populations comprised of sites grouped to the "region" level, with the following selection criteria used to determine which species to include in the analysis:

  1. Bd swab + body size (SVL) data for at least 60 individuals in a given population
  2. populations sampled over at least 3 years
  3. species found in at least valid 2 populations
  4. at least 15 adult and subadult each


```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show data collection code"

# identify populations
bd_population = bd_sample %>%
  # filter(!is.na(svl_mm) | !is.na(body_mass_g)) %>%
  filter(country == "usa",
         region == "california",
         life_stage != "tadpole",
         # !is.na(svl_mm)
         ) %>%
  left_join(data_pop, by = "site", copy = TRUE) %>%
  mutate(population = ifelse(is.na(population), site, population),
         tax_pop = paste0(taxon_capture, "_", population),
         year = year(date),
         life_stage_simple = life_stage,
         life_stage_simple = case_when(
           is.na(svl_mm) ~ life_stage,
           ((taxon_capture == "rana_muscosa") & (svl_mm >= 40)) ~ "adult",
           ((taxon_capture == "rana_muscosa") & (svl_mm < 40)) ~ "subadult",
           ((taxon_capture == "rana_sierrae") & (svl_mm >= 40)) ~ "adult",
           ((taxon_capture == "rana_sierrae") & (svl_mm < 40)) ~ "subadult",
           .default = life_stage))
         
bd_species_valid = bd_population %>%
  group_by(taxon_capture, life_stage_simple) %>%
  summarise(ls_gte_14 = n() >= 14,
            .groups = "drop") %>%
  group_by(taxon_capture) %>%
  filter(sum(as.integer(ls_gte_14)) == 2) %>%
  ungroup() %>%
  select(taxon_capture) %>%
  left_join(bd_population, by = c("taxon_capture")) %>%
  group_by(taxon_capture) %>%
  summarise(count = n(),
            sample_count = n(),
            year_first = min(year),
            year_last = max(year),
            year_count = n_distinct(year),
            .groups = "drop") %>%
  collect()

# selection criteria
## - 60 samples per population
## - 3 years of sampling
## - 2 populations per species
## - at least 15 each adult and subadult per population

# determine populations which meet criteria
# bd_population_valid = bd_population %>%
#   group_by(population, taxon_capture, life_stage_simple) %>%
#   summarise(ls_gt_15 = n() >= 15,
#             .groups = "drop") %>%
#   group_by(population, taxon_capture) %>%
#   filter(sum(as.integer(ls_gt_15)) == 2) %>%
#   left_join(bd_population, by = c("taxon_capture", "population")) %>%
#   group_by(population, region, country, taxon_capture) %>%
#   summarise(count = n(),
#             sample_count = n(),
#             year_first = min(year),
#             year_last = max(year),
#             year_count = n_distinct(year),
#             .groups = "drop") %>%
#   filter(sample_count >= 60,
#          year_count >= 3) %>%
#   group_by(taxon_capture) %>%
#   mutate(population_count = n()) %>%
#   ungroup() %>%
#   # filter(population_count >= 2) %>%
#   arrange(country, taxon_capture, desc(sample_count)) %>%
#   collect()

# # join with bd data, select
# bd_sample_valid = bd_population %>%
#   filter(population %in% bd_population_valid$population &
#            taxon_capture %in% bd_population_valid$taxon_capture) %>%
#   left_join(db_bd %>%
#               group_by(sample_id) %>%
#               summarise(bd_swab_count = n(),
#                         bd_detected = any(detected),
#                         bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
#                         .groups = "drop"),
#             by = "sample_id") %>%
#   mutate(svl_mm_noise = svl_mm + runif(1) -.5) %>%
#   select(sample_id,
#          bd_swab_count,
#          bd_detected,
#          bd_mean_its1_copies_per_swab,
#          capture_id,
#          taxon_capture,
#          life_stage,
#          life_stage_simple,
#          svl_mm,
#          body_mass_g,
#          sex,
#          survey_id,
#          start_timestamp_utc,
#          date,
#          site,
#          site_id,
#          geographic_area,
#          population,
#          tax_pop,
#          region,
#          country) %>%
#   collect() %>%
#   mutate(month = month(date),
#                 season = case_match(month,
#                                     c(5, 6, 7, 8) ~ "lluvia",
#                                     c(10, 11, 12, 1) ~ "seca",
#                                     .default = NA_character_),
#          svl_mm_noise = svl_mm + runif(n(), min = -0.5, max = 0.5)) %>%
#   filter(!(taxon_capture == "silverstoneia_flotator" & svl_mm > 100))

bd_sample_valid = bd_population %>%
  filter(taxon_capture %in% bd_species_valid$taxon_capture) %>%
  left_join(db_bd %>%
              filter(!is.na(detected)) %>%
              group_by(sample_id) %>%
              summarise(bd_swab_count = n(),
                        bd_detected = any(detected),
                        bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
                        .groups = "drop"),
            by = "sample_id") %>%
  select(sample_id,
         bd_swab_count,
         bd_detected,
         bd_mean_its1_copies_per_swab,
         capture_id,
         taxon_capture,
         life_stage,
         life_stage_simple,
         svl_mm,
         body_mass_g,
         sex,
         survey_id,
         start_timestamp_utc,
         date,
         site,
         site_id,
         geographic_area,
         population,
         tax_pop,
         region,
         country) %>%
  collect() %>%
  mutate(month = month(date))

pp = bd_sample_valid %>%
  group_by(taxon_capture) %>%
  summarise(no_svl = sum(is.na(svl_mm)),
            no_ls = sum(is.na(life_stage)))

# verify life stage with SVL as a check

bd_model = bd_sample_valid %>%
  filter(!is.na(bd_mean_its1_copies_per_swab),
         !is.na(svl_mm)) %>%
  mutate(bd_load = bd_mean_its1_copies_per_swab,
         # log_bd_load = log(bd_load + 1),
         log_bd_load = log(bd_load)) %>%
  select(bd_load,
         log_bd_load,
         bd_detected,
         svl_mm,
         site,
         population,
         taxon_capture,
         tax_pop,
         life_stage,
         life_stage_simple,
         date,
         month,
         population,
         region,
         country)

head(bd_model)
```

## Descriptive stats
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show selected data stats code"

(bd_model_stats = bd_model %>%
  group_by(taxon_capture) %>%
  summarise(regions = paste(sort(unique(region)), collapse = ", "),
            population_n = n_distinct(population),
            site_n = n_distinct(site),
            year_first = year(min(date)),
            year_last = year(max(date)),
            year_count = n_distinct(year(date)),
            adult_n = sum(life_stage_simple == "adult"),
            subadult_n = sum(life_stage_simple == "subadult"),
            .groups = "drop") %>%
  arrange(taxon_capture))

```

## Modeling
I modeled Bd load using a Baysian zero-inflated log-normal model [@schrock2025fungi] with fixed effects of life stage, and considering population as a random effect. The "hurdle" infection probability (hu) and the variability in Bd load (sigma) are allowed to vary with life stage. 

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show model code"

run_m2_ltp = function(taxon){
  # colostethus_panamansis
  m2_ltp <- brm(
    formula = bf(
      bd_load ~ 1 + life_stage_simple + (1 | population),
      hu ~ 1 + life_stage_simple,
      sigma ~ 1 + life_stage_simple
    ),
    data = bd_model %>%
      filter(taxon_capture == taxon),
    family = hurdle_lognormal(),
    chains = 4,
    iter = 4000,
    warmup = 1000,
    cores = 4,
    control = list(adapt_delta = 0.95, max_treedepth = 12),
    seed = 123
  )
}

# Rana muscosa
taxon_m = "rana_muscosa"
output_m = "model_results_zln_life_tax_pop_ramu.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# Rana sierrae
taxon_m = "rana_sierrae"
output_m = "model_results_zln_life_tax_pop_rasi.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

```

## Processing and visualization
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show processing & visualization functions"

extract_abbr <- function(taxon) {
  parts <- strsplit(taxon, "_")[[1]]
  genus_abbr <- substr(parts[1], 1, 2)
  species_abbr <- substr(parts[2], 1, 2)
  paste0(genus_abbr, species_abbr)
}

load_model = function(taxon, template = "model_results_zln_life_tax_sea_pop_xxxx.rds"){
  filename = gsub("xxxx", extract_abbr(taxon), template)
  cat(taxon, ":\n\t", filename, "\n")
  return(readRDS(filename))
}

model_report = function(model_m){
  summary(model_m)
  plot((model_m), ask = FALSE)
  plot(conditional_effects(model_m), ask = FALSE)
  pp_check(model_m) +
    scale_x_log10()
}
get_species_name = function(taxon) {
  species_name = str_to_sentence(gsub("_", " ", taxon))
}

samp_pos = function(m_zln, lifestage, season, n, s = 1){
  pp = data.frame(
    life_stage_simple = lifestage,
    season = season,
    population = "NA"
  ) %>%
    slice(rep(1:n(), s))
  
  p_samp = posterior_predict(m_zln,
                             newdata = pp,
                             ndraws = n,
                             allow_new_levels = TRUE)
}

# draws
collect_draws = function(m_spec){
  m_spec %>%
    spread_draws(b_Intercept,
                 b_sigma_Intercept,
                 b_hu_Intercept,
                 b_life_stage_simplesubadult,
                 b_sigma_life_stage_simplesubadult,
                 b_hu_life_stage_simplesubadult,
                 sd_population__Intercept) %>%
    mutate(b_adult = b_Intercept,
           b_subadult = b_Intercept + b_life_stage_simplesubadult,
           b_hu_adult = b_hu_Intercept,
           b_hu_subadult = b_hu_Intercept + b_hu_life_stage_simplesubadult,
           b_sigma_adult = b_sigma_Intercept,
           b_sigma_subadult = b_sigma_Intercept + b_sigma_life_stage_simplesubadult) %>%
    select(.draw,
           b_adult,
           b_subadult,
           b_hu_adult,
           b_hu_subadult,
           b_sigma_adult,
           b_sigma_subadult,
           sd_population__Intercept) %>%
    pivot_longer(cols = c(b_adult,
                          b_subadult,
                          b_hu_adult,
                          b_hu_subadult,
                          b_sigma_adult,
                          b_sigma_subadult),
                 values_to = "param") %>% 
    mutate(
      param_name = case_when(
        grepl("b_hu", name) ~ "b_hu",
        grepl("b_sigma", name) ~ "b_sigma",
        grepl("b_", name) ~ "b",
        .default = NA_character_),
      life_stage_simple = case_when(
        grepl("subadult", name) ~ "subadult",
        grepl("adult", name) ~ "adult",
        .default = NA_character_)) %>%
    pivot_wider(id_cols = c(.draw, life_stage_simple, sd_population__Intercept),
                values_from = param,
                names_from = param_name) %>%
    mutate(p0 = plogis(b_hu),
           prevalence = 1 - p0,
           sigma = exp(b_sigma),
           sd_eff = sqrt(sigma^2 + sd_population__Intercept^2))
}


density_mat = function(lower, upper, len, draws){
  density_grid = seq(lower, upper, length.out = len)
  
  grouped_draws = draws %>%
    group_by(life_stage_simple) %>%
    group_split()
  
  group_summaries = map(grouped_draws, function(group_df) {
    # Get the group labels
    life_stage = unique(group_df$life_stage_simple)
    
    # Compute density matrices
    pdf_density_mat = pmap(
      list(group_df$b, group_df$sd_eff, group_df$p0),
      function(b, sd_eff, p0) {
        dnorm(density_grid, mean = b, sd = sd_eff) * (1 - p0)
      }
    ) %>%
      simplify2array() %>%
      t()
    
    ccdf_density_mat = pmap(
      list(group_df$b, group_df$sd_eff, group_df$p0),
      function(b, sd_eff, p0) {
        (1 - pnorm(density_grid, mean = b, sd = sd_eff)) * (1 - p0)
      }
    ) %>%
      simplify2array() %>%
      t()
    
    
    # Summary statistics:
    pdf_q.5 = apply(pdf_density_mat, 2, quantile, probs = 0.5)
    pdf_q.25 = apply(pdf_density_mat, 2, quantile, probs = 0.25)
    pdf_q.75 = apply(pdf_density_mat, 2, quantile, probs = 0.75)
    
    ccdf_q.5 = apply(ccdf_density_mat, 2, quantile, probs = 0.5)
    ccdf_q.25 = apply(ccdf_density_mat, 2, quantile, probs = 0.25)
    ccdf_q.75 = apply(ccdf_density_mat, 2, quantile, probs = 0.75)
    
    # Return a tidy tibble for plotting or analysis
    tibble(
      life_stage_simple = life_stage,
      density = density_grid,
      pdf_median = pdf_q.5,
      pdf_lower = pdf_q.25,
      pdf_upper = pdf_q.75,
      ccdf_median = ccdf_q.5,
      ccdf_lower = ccdf_q.25,
      ccdf_upper = ccdf_q.75
    )
  })
  
  summary_df <- bind_rows(group_summaries)
}

samp_pos = function(m_zln, lifestage, n){

  pp = data.frame(
    life_stage_simple = lifestage,
    population = "NA"
  )
  
  p_samp = posterior_predict(m_zln,
                             newdata = pp,
                             ndraws = n,
                             allow_new_levels = TRUE)

}

sample_posterior_life_sea = function(m_zln, species_name, n = 10000){
  ps_adult = samp_pos(m_zln, "adult", n)
  ps_subadult = samp_pos(m_zln, "subadult", n)

  df_samps_adult = data.frame(
    life_stage_simple = "adult",
    bd_load = ps_adult
  )

  df_samps_subadult = data.frame(
    life_stage_simple = "subadult",
    bd_load = ps_subadult
  )
  
  df_samps = bind_rows(df_samps_adult,
                       df_samps_subadult) %>%
    mutate(bd_load = ifelse(bd_load < 0.3, 0, bd_load),
           log_bd_load = log(bd_load + 1),
           taxon_capture = species_name)
}

wilson_ci = function(p_hat, n, conf.level = 0.95) {
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  denominator <- 1 + (z^2 / n)
  centre_adjusted_probability <- p_hat + (z^2 / (2 * n))
  adjusted_standard_deviation <- sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  
  lower_bound <- (centre_adjusted_probability - z * adjusted_standard_deviation) / denominator
  upper_bound <- (centre_adjusted_probability + z * adjusted_standard_deviation) / denominator
  
  return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}

wilson_ci_lower = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[1])
}

wilson_ci_upper = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[2])
}

sample_stats = function(pps) {
  pps %>%
    group_by(life_stage_simple) %>%
    summarise(n = n(),
              n_pos = sum(bd_load > 0),
              bd_prevalence = sum(bd_load > 0) / n(),
              bd_prevalence_ci_lower = wilson_ci_lower(bd_prevalence, n(), 0.95),
              bd_prevalence_ci_upper = wilson_ci_upper(bd_prevalence, n(), 0.95),
              min_log_load_inf = min(log_bd_load[bd_load > 0]),
              q_25_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.25),
              q_50_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.50),
              q_75_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.75),
              max_log_load_inf = max(log_bd_load[bd_load > 0]),
              se = sqrt(bd_prevalence*(1-bd_prevalence)/n),
              .groups = "drop")
}

plot_prev_obs = function(obs_stats, species_name) {
  dodge_width = 0.5  # Adjust width as needed
  
  ggplot(obs_stats, aes(x = life_stage_simple, color = life_stage_simple)) +
    geom_point(aes(y = bd_prevalence),
               position = position_dodge(width = dodge_width)) +   # dodge points side by side
    geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                  width = 0.2,
                  position = position_dodge(width = dodge_width)) +  # dodge error bars side by side, same width
    theme_minimal() +
    ggtitle(paste0("Observed prevalence: ", species_name)) +
    xlab("Life Stage") +
    ylab("Bd prevalence [-]\n(with 95% CI)") +
    labs(color = "Life stage") +
    geom_text(aes(label = paste0("n=", n),
                  y = 0.95),
              position = position_dodge(width = dodge_width + 0.5)) +  # dodge text labels similarly
    ylim(0, 1)
}

plot_prev_mod = function(draws_spec, species_name){
  ggplot(draws_spec, aes(prevalence, x = life_stage_simple, color = life_stage_simple)) +
    geom_boxplot(coef = NULL) + 
    theme_minimal() +
    ggtitle(paste0("Modeled prevalence: ", species_name)) +
    xlab("Life Stage") +
    ylab("Bd prevalence [-]\n") +
    labs(color = "Life stage") +
    ylim(0, 1)
}

plot_load_obs = function(bd_model_spec, obs_stats, species_name){
  ggplot(bd_model_spec %>%
           filter(bd_load > 0), aes(log_bd_load, x = life_stage_simple, color = life_stage_simple)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Observed Bd-positive load: ", spec_name)) +
    xlab("Life Stage") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    geom_text(
      data = obs_stats,
      aes(
        y = q_50_log_load_inf,
        label = paste0("n=", n_pos),
        group = life_stage_simple
      ),
      position = position_dodge(width = .75),
      vjust = -0.25
    ) +
    ylim(log(0.3), 20)
}

# plot_load_mod = function(draws_spec, species_name) {
#   ggplot(draws_spec, aes(b, x = season, color = life_stage_simple, linetype = season)) +
#     geom_boxplot() + 
#     theme_minimal() +
#     ggtitle(paste0("Modeled Bd-positive load: ", species_name)) +
#     xlab("Season") +
#     ylab("log(Bd load) [-]") +
#     labs(color = "Life stage") +
#     ylim(log(0.3), 15)
# }

plot_load_mod = function(pps, species_name) {
  ggplot(pps %>%
           filter(bd_load > 0), aes(log_bd_load, x = life_stage_simple, color = life_stage_simple)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Modeled Bd-positive load: ", species_name)) +
    xlab("Life Stage") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    ylim(log(0.3), 20)
}

plot_pdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = pdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple)) +
    geom_ribbon(aes(ymin = pdf_lower,
                    ymax = pdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("PDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage") +
    xlab("log(Bd load) [-]") +
    ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0))
}

plot_ccdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = ccdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple)) +
    geom_ribbon(aes(ymin = ccdf_lower,
                    ymax = ccdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("CCDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage") +
    xlab("log(Bd load) [-]") +
    ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
    ylim(0, 1)
}

```

# Results
Results are broken out first by species, then combined for comparison between species

## Rana muscosa
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: Rana muscosa code

taxon_m = "rana_muscosa"
spec_name = get_species_name(taxon_m)
m_zln_ramu = load_model(taxon_m, template = "model_results_zln_life_tax_pop_xxxx.rds")

draws_ramu = collect_draws(m_zln_ramu) %>%
  mutate(taxon_capture = spec_name)

density_mat_ramu = density_mat(log(0.3), 20, 100, draws_ramu) %>%
  mutate(taxon_capture = spec_name)

pps_ramu = sample_posterior_life_sea(m_zln_ramu, spec_name, 10000)

bd_model_ramu = bd_model %>%
  filter(taxon_capture == taxon_m)

obs_stats_ramu = sample_stats(bd_model_ramu) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# model_report(m_zln_ramu)

```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_ramu, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_ramu, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_ramu, obs_stats_ramu, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(pps_ramu, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_ramu, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_ramu, spec_name))
```
:::

## Rana sierrae
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: Rana sierrae code

taxon_m = "rana_sierrae"
spec_name = get_species_name(taxon_m)
m_zln_rasi = load_model(taxon_m, template = "model_results_zln_life_tax_pop_xxxx.rds")

draws_rasi = collect_draws(m_zln_rasi) %>%
  mutate(taxon_capture = spec_name)

density_mat_rasi = density_mat(log(0.3), 20, 100, draws_rasi) %>%
  mutate(taxon_capture = spec_name)

pps_rasi = sample_posterior_life_sea(m_zln_rasi, spec_name, 10000)

bd_model_rasi = bd_model %>%
  filter(taxon_capture == taxon_m)

obs_stats_rasi = sample_stats(bd_model_rasi) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# model_report(m_zln_rasi)

```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_rasi, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_rasi, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_rasi, obs_stats_rasi, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(pps_rasi, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_rasi, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_rasi, spec_name))
```

## Combined results
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show combined results code"

obs_stats_all = bind_rows(
  obs_stats_ramu,
  obs_stats_rasi) %>%
  mutate(label_y = ifelse(life_stage_simple == "adult", 1, 0.96))

draws_all = bind_rows(
  draws_ramu,
  draws_rasi)

density_mat_all = bind_rows(
  density_mat_ramu,
  density_mat_rasi)

pps_all = bind_rows(
  pps_ramu,
  pps_rasi)


bd_model_all = bd_model %>%
  filter(taxon_capture %in% c("rana_muscosa", "rana_sierrae")) %>%
  mutate(taxon_capture = str_to_sentence(gsub("_", " ", taxon_capture)))

```

::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# observed prevalence
ggplot(obs_stats_all, aes(y = bd_prevalence, x = life_stage_simple, color = life_stage_simple)) +
  geom_point(position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                width = 0.2,
                position = position_dodge(width = 0.5)) +
  theme_minimal() +
  ggtitle("Observed prevalence") +
  xlab("Life Stage") +
  ylab("Bd prevalence [-]\n(with 95% CI)") +
  labs(color = "Life stage") +
  geom_text(aes(label = paste0("n=", n),  y = label_y),
          position = position_dodge(width = 0.5)) +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# model prevalence
ggplot(draws_all, aes(prevalence, x = life_stage_simple, color = life_stage_simple)) +
  geom_boxplot(coef = NULL) + 
  theme_minimal() +
  ggtitle("Modeled prevalence") +
  xlab("Life Stage") +
  ylab("Bd prevalence [-]\n") +
  labs(color = "Life stage") +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Observed Bd load
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# obsevation bd load
ggplot(bd_model_all %>%
         filter(bd_load > 0), aes(log_bd_load, x = life_stage_simple, color = life_stage_simple)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Observed Bd-positive load") +
  xlab("Life Stage") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  geom_text(
    data = obs_stats_all,
    aes(
      x = life_stage_simple,
      y = max(bd_model_all$log_bd_load) * label_y * 1.05,
      label = paste0("n=", n_pos),
      group = life_stage_simple
    ),
    position = position_dodge(width = 0.75),
    vjust = 0
  ) +
  ylim(log(0.3), 20) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Bd load
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# modeled bd load
ggplot(pps_all %>%
         filter(bd_load > 0), aes(log_bd_load, x = life_stage_simple, color = life_stage_simple)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Modeled Bd-positive load") +
  xlab("Life Stage") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  ylim(log(0.3), 20) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# PDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = pdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple)) +
  geom_ribbon(aes(ymin = pdf_lower,
                  ymax = pdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled PDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage") +
  xlab("log(Bd load) [-]") +
  ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))

# PDF -- facet by life_stage & season
ggplot(density_mat_all, aes(x = density,
                            y = pdf_median,
                            color = taxon_capture, 
                            fill = taxon_capture)) +
  geom_ribbon(aes(ymin = pdf_lower,
                  ymax = pdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled PDF of Bd-positive load") +
  labs(color = "Species",
       fill = "Species") +
  scale_color_manual(values = c("darkgreen", "purple")) +
  scale_fill_manual(values = c("darkgreen", "purple")) +
  xlab("log(Bd load) [-]") +
  ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  facet_grid(. ~ life_stage_simple)
```

### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
#| fig-width: 8
#| fig-height: 4
# CCDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = ccdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple)) +
  geom_ribbon(aes(ymin = ccdf_lower,
                  ymax = ccdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled CCDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage") +
  xlab("log(Bd load) [-]") +
  ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))

# CCDF -- facet by life_stage & season
ggplot(density_mat_all, aes(x = density,
                            y = ccdf_median,
                            color = taxon_capture, 
                            fill = taxon_capture)) +
  geom_ribbon(aes(ymin = ccdf_lower,
                  ymax = ccdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled CCDF of Bd-positive load") +
  labs(color = "Species",
       fill = "Species") +
  scale_color_manual(values = c("darkgreen", "purple")) +
  scale_fill_manual(values = c("darkgreen", "purple")) +
  xlab("log(Bd load) [-]") +
  ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  ylim(0, 1) +
  facet_grid(. ~ life_stage_simple)
```
:::