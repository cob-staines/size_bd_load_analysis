---
title: "size_bd_modeling_presentation_zln"
format: html
---

# Working hypotheses:

a. Younger individuals are more likely to be infected with Bd than older individuals in a given population
b. Younger individuals are more likely to carry higher Bd loads than older individuals in a given population

# Setup
```{r}
#| eval: true
#| output: false
#| code-fold: true
#| code-summary: "Show setup code"

# setup
librarian::shelf(tidyverse, dbplyr, here, janitor, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, brms, loo, bayesplot, tidybayes, ggplot2, ggpattern)

## Connect to DB
dbcon <- hopToDB("ribbitr")

# load populations
data_pop = read.csv(here("data", "sn_site_pop_2025-05-15.csv")) %>%
  rename(population = pop_id) %>%
  mutate(population = ifelse(!is.na(population), paste0(as.character(population), "_pop"), NA_character_))

# table pointers
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

bd_sample = db_sample %>%
  right_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(sample_type == "bd")
```
# Data selection
#### Preliminary selection criteria:

- Bd swab + body size (SVL) data for at least 60 individuals in a given population
- populations sampled over at least 3 years
- species found in at least valid 2 populations
- at least 15 adult and subadult each

```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show data selection code"

# identify populations
bd_population = bd_sample %>%
  # filter(!is.na(svl_mm) | !is.na(body_mass_g)) %>%
  filter(country == "panama",
         !(life_stage %in% c("eggmass", "tadpole")),
         !is.na(svl_mm)) %>%
  mutate(population = region,
         tax_pop = paste0(taxon_capture, "_", population),
         year = year(date),
         life_stage_simple = case_when(
           # Savage 1972 & Crump 1988
           ((taxon_capture == "atelopus_varius") & (svl_mm >= 25)) ~ "adult",
           ((taxon_capture == "atelopus_varius") & (svl_mm < 25)) ~ "subadult",
           # Lynch and Myers 1983
           ((taxon_capture == "craugastor_crassidigitus") & (svl_mm >= 20.2)) ~ "adult",
           ((taxon_capture == "craugastor_crassidigitus") & (svl_mm < 20.2)) ~ "subadult",
           # Lynch and Myers 1983
           ((taxon_capture == "craugastor_fitzingeri") & (svl_mm >= 23.5)) ~ "adult",
           ((taxon_capture == "craugastor_fitzingeri") & (svl_mm < 23.5)) ~ "subadult",
           # Amphibiaweb
           ((taxon_capture == "colostethus_panamansis") & (svl_mm >= 18.8)) ~ "adult",
           ((taxon_capture == "colostethus_panamansis") & (svl_mm < 18.8)) ~ "subadult",
           # Leenders 2001
           ((taxon_capture == "dendrobates_auratus") & (svl_mm >= 25)) ~ "adult",
           ((taxon_capture == "dendrobates_auratus") & (svl_mm < 25)) ~ "subadult",
           # Amphibiaweb
           ((taxon_capture == "espadarana_prosoblepon") & (svl_mm >= 21)) ~ "adult",
           ((taxon_capture == "espadarana_prosoblepon") & (svl_mm < 21)) ~ "subadult",
           # Basante 2025
           ((taxon_capture == "lithobates_warszewitschii") & (svl_mm >= 35)) ~ "adult",
           ((taxon_capture == "lithobates_warszewitschii") & (svl_mm < 35)) ~ "subadult",
           # Savage 2002
           ((taxon_capture == "rhaebo_haematiticus") & (svl_mm >= 42)) ~ "adult",
           ((taxon_capture == "rhaebo_haematiticus") & (svl_mm < 42)) ~ "subadult",
           # Savage 2002
           ((taxon_capture == "sachatamia_albomaculata") & (svl_mm >= 20.5)) ~ "adult",
           ((taxon_capture == "sachatamia_albomaculata") & (svl_mm < 20.5)) ~ "subadult",
           # Ibunez & Smith 1995
           ((taxon_capture == "silverstoneia_flotator") & (svl_mm >= 15.1)) ~ "adult",
           ((taxon_capture == "silverstoneia_flotator") & (svl_mm < 15.1)) ~ "subadult",
           # Duellman, W. E. 2001
           ((taxon_capture == "smilisca_sila") & (svl_mm >= 31.6)) ~ "adult",
           ((taxon_capture == "smilisca_sila") & (svl_mm < 31.6)) ~ "subadult",
           .default = NA_character_
         ))

peace = bd_population %>%
  group_by(taxon_capture,
           region) %>%
  count() %>%
  collect()
# selection criteria
## - 60 samples per population
## - 3 years of sampling
## - 2 populations per species
## - at least 15 each adult and subadult per population

# determine populations which meet criteria
bd_population_valid = bd_population %>%
  group_by(population, taxon_capture, life_stage_simple) %>%
  summarise(ls_gt_15 = n() > 15,
            .groups = "drop") %>%
  group_by(population, taxon_capture) %>%
  filter(sum(as.integer(ls_gt_15)) == 2) %>%
  left_join(bd_population, by = c("taxon_capture", "population")) %>%
  group_by(population, region, country, taxon_capture) %>%
  summarise(count = n(),
            sample_count = n(),
            year_first = min(year),
            year_last = max(year),
            year_count = n_distinct(year),
            .groups = "drop") %>%
  filter(sample_count >= 60,
         year_count >= 3) %>%
  group_by(taxon_capture) %>%
  mutate(population_count = n()) %>%
  ungroup() %>%
  # filter(population_count >= 2) %>%
  arrange(country, taxon_capture, desc(sample_count)) %>%
  collect()

# join with bd data, select
bd_sample_valid = bd_population %>%
  filter(population %in% bd_population_valid$population &
           taxon_capture %in% bd_population_valid$taxon_capture) %>%
  left_join(db_bd %>%
              group_by(sample_id) %>%
              summarise(bd_swab_count = n(),
                        bd_detected = any(detected),
                        bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
                        .groups = "drop"),
            by = "sample_id") %>%
  mutate(svl_mm_noise = svl_mm + runif(1) -.5) %>%
  select(sample_id,
         bd_swab_count,
         bd_detected,
         bd_mean_its1_copies_per_swab,
         capture_id,
         taxon_capture,
         life_stage,
         life_stage_simple,
         svl_mm,
         body_mass_g,
         sex,
         survey_id,
         start_timestamp_utc,
         date,
         site,
         site_id,
         geographic_area,
         population,
         tax_pop,
         region,
         country) %>%
  collect() %>%
  mutate(month = month(date),
                season = case_match(month,
                                    c(5, 6, 7, 8) ~ "lluvia",
                                    c(10, 11, 12, 1) ~ "seca",
                                    .default = NA_character_),
         svl_mm_noise = svl_mm + runif(n(), min = -0.5, max = 0.5)) %>%
  filter(!(taxon_capture == "silverstoneia_flotator" & svl_mm > 100))

bd_model = bd_sample_valid %>%
  filter(!is.na(bd_mean_its1_copies_per_swab),
         !is.na(svl_mm)) %>%
  mutate(bd_load = bd_mean_its1_copies_per_swab,
         # log_bd_load = log(bd_load + 1),
         log_bd_load = log(bd_load),
         bd_load_int = as.integer(bd_load)) %>%
  select(bd_load,
         log_bd_load,
         bd_load_int,
         bd_detected,
         svl_mm,
         svl_mm_noise,
         site,
         population,
         taxon_capture,
         tax_pop,
         life_stage,
         life_stage_simple,
         date,
         season,
         population,
         region,
         country)
```

# Descriptive stats
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show selected data stats code"

bd_model_stats = bd_model %>%
  filter(!is.na(season)) %>%
  group_by(taxon_capture, country, season) %>%
  summarise(regions = paste(sort(unique(region)), collapse = ", "),
            population_n = n_distinct(population),
            site_n = n_distinct(site),
            year_first = year(min(date)),
            year_last = year(max(date)),
            year_count = n_distinct(year(date)),
            adult_n = sum(life_stage_simple == "adult"),
            subadult_n = sum(life_stage_simple == "subadult"),
            .groups = "drop") %>%
  arrange(country,
          taxon_capture)

```

# lognormal zero inflated model
```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show model code"

run_m2_ltp = function(taxon){
  # colostethus_panamansis
  m2_ltp <- brm(
    formula = bf(
      bd_load_int ~ 1 + life_stage_simple + season + (1 | population),
      hu ~ 1 + life_stage_simple + season,
      sigma ~ 1 + life_stage_simple + season
    ),
    data = bd_model %>%
      filter(taxon_capture == taxon),
    family = hurdle_lognormal(),
    chains = 4,
    iter = 4000,
    warmup = 1000,
    cores = 4,
    control = list(adapt_delta = 0.95, max_treedepth = 12),
    seed = 123
  )
}

# # atelopus
taxon_m = "atelopus_varius"
output_m = "model_results_zln_life_tax_sea_pop_atva.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# colos
taxon_m = "colostethus_panamansis"
output_m = "model_results_zln_life_tax_sea_pop_copa.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# wartz
taxon_m = "lithobates_warszewitschii"
output_m = "model_results_zln_life_tax_sea_pop_liwa.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# rhaebo
taxon_m = "rhaebo_haematiticus"
output_m = "model_results_zln_life_tax_sea_pop_rhha.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# albomac
taxon_m = "sachatamia_albomaculata"
output_m = "model_results_zln_life_tax_sea_pop_saal.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# flotator
taxon_m = "silverstoneia_flotator"
output_m = "model_results_zln_life_tax_sea_pop_sifl.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

```

# define functions
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show processing functions"

extract_abbr <- function(name) {
  parts <- strsplit(name, "_")[[1]]
  genus_abbr <- substr(parts[1], 1, 2)
  species_abbr <- substr(parts[2], 1, 2)
  paste0(genus_abbr, species_abbr)
}

model_taxa_season = bd_model_stats %>%
  select(taxon_capture) %>%
  distinct() %>%
  mutate(prefix = map_chr(taxon_capture, ~extract_abbr(.x)),
         results_file = paste0("model_results_zln_life_tax_sea_pop_", prefix, ".rds"))

load_model = function(id){
  print(model_taxa_season$taxon_capture[id])
  return(readRDS(model_taxa_season$results_file[id]))
}

model_report = function(model_m){
  summary(model_m)
  plot((model_m), ask = FALSE)
  plot(conditional_effects(model_m), ask = FALSE)
  pp_check(model_m) +
    scale_x_log10()
}

samp_pos = function(m_zln, lifestage, season, n, s = 1){
  pp = data.frame(
    life_stage_simple = lifestage,
    season = season,
    population = "NA"
  ) %>%
    slice(rep(1:n(), s))
  
  p_samp = posterior_predict(m_zln,
                             newdata = pp,
                             ndraws = n,
                             allow_new_levels = TRUE)
}

# draws
collect_draws = function(m_spec){
  m_spec %>%
    spread_draws(b_Intercept,
                 b_sigma_Intercept,
                 b_hu_Intercept,
                 b_life_stage_simplesubadult,
                 b_seasonseca,
                 b_sigma_life_stage_simplesubadult,
                 b_sigma_seasonseca,
                 b_hu_life_stage_simplesubadult,
                 b_hu_seasonseca,
                 sd_population__Intercept) %>%
    mutate(b_adult_lluvia = b_Intercept,
           b_adult_seca = b_Intercept + b_seasonseca,
           b_subadult_lluvia = b_Intercept + b_life_stage_simplesubadult,
           b_subadult_seca = b_Intercept + b_life_stage_simplesubadult + b_seasonseca,
           b_hu_adult_lluvia = b_hu_Intercept,
           b_hu_adult_seca = b_hu_Intercept + b_hu_seasonseca,
           b_hu_subadult_lluvia = b_hu_Intercept + b_hu_life_stage_simplesubadult,
           b_hu_subadult_seca = b_hu_Intercept + b_hu_life_stage_simplesubadult + b_hu_seasonseca,
           b_sigma_adult_lluvia = b_sigma_Intercept,
           b_sigma_adult_seca = b_sigma_Intercept + b_sigma_seasonseca,
           b_sigma_subadult_lluvia = b_sigma_Intercept + b_sigma_life_stage_simplesubadult,
           b_sigma_subadult_seca = b_sigma_Intercept + b_sigma_life_stage_simplesubadult + b_sigma_seasonseca) %>%
    select(.draw,
           b_adult_lluvia,
           b_adult_seca,
           b_subadult_lluvia,
           b_subadult_seca,
           b_hu_adult_lluvia,
           b_hu_adult_seca,
           b_hu_subadult_lluvia,
           b_hu_subadult_seca,
           b_sigma_adult_lluvia,
           b_sigma_adult_seca,
           b_sigma_subadult_lluvia,
           b_sigma_subadult_seca,
           sd_population__Intercept) %>%
    pivot_longer(cols = c(b_adult_lluvia,
                          b_adult_seca,
                          b_subadult_lluvia,
                          b_subadult_seca,
                          b_hu_adult_lluvia,
                          b_hu_adult_seca,
                          b_hu_subadult_lluvia,
                          b_hu_subadult_seca,
                          b_sigma_adult_lluvia,
                          b_sigma_adult_seca,
                          b_sigma_subadult_lluvia,
                          b_sigma_subadult_seca),
                 values_to = "param") %>% 
    mutate(
      param_name = case_when(
        grepl("b_hu", name) ~ "b_hu",
        grepl("b_sigma", name) ~ "b_sigma",
        grepl("b_", name) ~ "b",
        .default = NA_character_),
      life_stage_simple = case_when(
        grepl("subadult", name) ~ "subadult",
        grepl("adult", name) ~ "adult",
        .default = NA_character_),
      season = case_when(
        grepl("lluvia", name) ~ "lluvia",
        grepl("seca", name) ~ "seca",
        .default = NA_character_)) %>%
    pivot_wider(id_cols = c(.draw, life_stage_simple, season, sd_population__Intercept),
                values_from = param,
                names_from = param_name) %>%
    mutate(p0 = 1/(1 + exp(b_hu)),
           sd_eff = sqrt(b_sigma^2 + sd_population__Intercept))
}


density_mat = function(lower, upper, len, draws){
  density_grid = seq(lower, upper, length.out = len)
  
  grouped_draws = draws %>%
    group_by(life_stage_simple, season) %>%
    group_split()
  
  group_summaries = map(grouped_draws, function(group_df) {
    # Get the group labels
    life_stage = unique(group_df$life_stage_simple)
    season = unique(group_df$season)
    
    # Compute density matrices
    pdf_density_mat = pmap(
      list(group_df$b, group_df$sd_eff, group_df$p0),
      function(b, sd_eff, p0) {
        dnorm(density_grid, mean = b, sd = sd_eff) / (p0 + pnorm(density_grid[1]))
      }
    ) %>%
      simplify2array() %>%
      t()
    
    ccdf_density_mat = pmap(
      list(group_df$b, group_df$sd_eff, group_df$p0),
      function(b, sd_eff, p0) {
        (1 - pnorm(density_grid, mean = b, sd = sd_eff)) * (1 - p0 + pnorm(density_grid[1], mean = b, sd = sd_eff))
      }
    ) %>%
      simplify2array() %>%
      t()
    
    
    # Summary statistics:
    pdf_q.5 = apply(pdf_density_mat, 2, quantile, probs = 0.5)
    pdf_q.25 = apply(pdf_density_mat, 2, quantile, probs = 0.25)
    pdf_q.75 = apply(pdf_density_mat, 2, quantile, probs = 0.75)
    
    ccdf_q.5 = apply(ccdf_density_mat, 2, quantile, probs = 0.5)
    ccdf_q.25 = apply(ccdf_density_mat, 2, quantile, probs = 0.25)
    ccdf_q.75 = apply(ccdf_density_mat, 2, quantile, probs = 0.75)
    
    # Return a tidy tibble for plotting or analysis
    tibble(
      life_stage_simple = life_stage,
      season = season,
      density = density_grid,
      pdf_median = pdf_q.5,
      pdf_lower = pdf_q.25,
      pdf_upper = pdf_q.75,
      ccdf_median = ccdf_q.5,
      ccdf_lower = ccdf_q.25,
      ccdf_upper = ccdf_q.75
    )
  })
  
  summary_df <- bind_rows(group_summaries)
}

wilson_ci = function(p_hat, n, conf.level = 0.95) {
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  denominator <- 1 + (z^2 / n)
  centre_adjusted_probability <- p_hat + (z^2 / (2 * n))
  adjusted_standard_deviation <- sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  
  lower_bound <- (centre_adjusted_probability - z * adjusted_standard_deviation) / denominator
  upper_bound <- (centre_adjusted_probability + z * adjusted_standard_deviation) / denominator
  
  return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}

wilson_ci_lower = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[1])
}

wilson_ci_upper = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[2])
}

sample_stats = function(pps) {
  pps %>%
    group_by(life_stage_simple,
             season) %>%
    summarise(n = n(),
              bd_prevalence = sum(bd_load > 0) / n(),
              bd_prevalence_ci_lower = wilson_ci_lower(bd_prevalence, n(), 0.95),
              bd_prevalence_ci_upper = wilson_ci_upper(bd_prevalence, n(), 0.95),
              min_log_load_inf = min(log_bd_load[bd_load > 0]),
              q_25_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.25),
              q_50_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.50),
              q_75_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.75),
              max_log_load_inf = max(log_bd_load[bd_load > 0]),
              se = sqrt(bd_prevalence*(1-bd_prevalence)/n),
              .groups = "drop")
}

plot_prev_obs = function(obs_stats, species_name) {
  dodge_width = 0.5  # Adjust width as needed
  
  ggplot(obs_stats, aes(y = bd_prevalence, x = season, color = life_stage_simple, linetype = season)) +
    geom_point(position = position_dodge(width = dodge_width)) +   # dodge points side by side
    geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                  width = 0.2,
                  position = position_dodge(width = dodge_width)) +  # dodge error bars side by side, same width
    theme_minimal() +
    ggtitle(paste0("Observed prevalence: ", species_name)) +
    xlab("Season") +
    ylab("Bd prevalence [-]\n(with 95% CI)") +
    labs(color = "Life stage") +
    geom_text(aes(label = paste0("n=", n)),
              position = position_dodge(width = dodge_width + 0.5)) +  # dodge text labels similarly
    ylim(0, 1)
}

plot_prev_mod = function(draws_spec, species_name){
  ggplot(draws_spec, aes(p0, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot(coef = NULL) + 
    theme_minimal() +
    ggtitle(paste0("Modeled prevalence: ", species_name)) +
    xlab("Season") +
    ylab("Bd prevalence [-]") +
    labs(color = "Life stage") +
    ylim(0, 1)
}

plot_load_obs = function(bd_model_spec, obs_stats, species_name){
  ggplot(bd_model_spec %>%
           filter(bd_load > 0), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Observed Bd-positive load: ", spec_name)) +
    xlab("Season") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    geom_text(
      data = obs_stats,
      aes(
        x = season,
        y = max(bd_model_spec$log_bd_load) * 1.05,
        label = paste0("n=", n),
        group = life_stage_simple
      ),
      position = position_dodge(width = 0.75),
      vjust = 0
    ) +
    ylim(log(0.3), 15)
}

plot_load_mod = function(draws_spec, species_name) {
  ggplot(draws_spec, aes(b, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Modeled Bd-positive load: ", species_name)) +
    xlab("Season") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    ylim(log(0.3), 15)
}

plot_pdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = pdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple,
                          linetype = season)) +
    geom_ribbon(aes(ymin = pdf_lower,
                    ymax = pdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("PDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage",
         linetype = "Season") +
    xlab("log(Bd load) [-]") +
    ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0))
}

plot_ccdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = ccdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple,
                          linetype = season)) +
    geom_ribbon(aes(ymin = ccdf_lower,
                    ymax = ccdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("CCDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage",
         linetype = "Season") +
    xlab("log(Bd load) [-]") +
    ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0)) +
    ylim(0, 1)
}

```

# Results
```{r}
# atelopus
spec_name = "Atelopus varius"

m_zln_atva = load_model(1)

draws_atva = collect_draws(m_zln_atva) %>%
  mutate(taxon_capture = spec_name)

density_mat_atva = density_mat(log(0.3), 15, 100, draws_atva) %>%
  mutate(taxon_capture = spec_name)

bd_model_atva = bd_model %>%
  filter(taxon_capture == "atelopus_varius",
         !is.na(season))

obs_stats_atva = sample_stats(bd_model_atva) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_atva, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_atva, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_atva, obs_stats_atva, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_atva, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_atva, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_atva, spec_name))

# model_report(m_zln_atva)
```

```{r}
# colos
spec_name = "Colostethus panamansis"

m_zln_coma = load_model(2)

draws_coma = collect_draws(m_zln_coma) %>%
  mutate(taxon_capture = spec_name)

density_mat_coma = density_mat(log(0.3), 15, 100, draws_coma) %>%
  mutate(taxon_capture = spec_name)

bd_model_coma = bd_model %>%
  filter(taxon_capture == "colostethus_panamansis",
         !is.na(season))

obs_stats_coma = sample_stats(bd_model_coma) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_coma, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_coma, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_coma, obs_stats_coma, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_coma, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_coma, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_coma, spec_name))

# model_report(m_zln_coma)
```


```{r}
# wartz
spec_name = "Lithobates warszewitschii"

m_zln_liwa = load_model(3)

draws_liwa = collect_draws(m_zln_liwa) %>%
  mutate(taxon_capture = spec_name)

density_mat_liwa = density_mat(log(0.3), 15, 100, draws_liwa) %>%
  mutate(taxon_capture = spec_name)

bd_model_liwa = bd_model %>%
  filter(taxon_capture == "lithobates_warszewitschii",
         !is.na(season))

obs_stats_liwa = sample_stats(bd_model_liwa) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_liwa, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_liwa, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_liwa, obs_stats_liwa, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_liwa, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_liwa, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_liwa, spec_name))

# model_report(m_zln_liwa)
```

```{r}
# rhaebo
spec_name = "Rhaebo haematiticus"

m_zln_rhha = load_model(4)

draws_rhha = collect_draws(m_zln_rhha) %>%
  mutate(taxon_capture = spec_name)

density_mat_rhha = density_mat(log(0.3), 15, 100, draws_rhha) %>%
  mutate(taxon_capture = spec_name)

bd_model_rhha = bd_model %>%
  filter(taxon_capture == "rhaebo_haematiticus",
         !is.na(season))

obs_stats_rhha = sample_stats(bd_model_rhha) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_rhha, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_rhha, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_rhha, obs_stats_rhha, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_rhha, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_rhha, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_rhha, spec_name))

# model_report(m_zln_rhha)
```

```{r}
# albomac
spec_name = "Sachatamia albomaculata"

m_zln_saal = load_model(5)

draws_saal = collect_draws(m_zln_saal) %>%
  mutate(taxon_capture = spec_name)

density_mat_saal = density_mat(log(0.3), 15, 100, draws_saal) %>%
  mutate(taxon_capture = spec_name)

bd_model_saal = bd_model %>%
  filter(taxon_capture == "sachatamia_albomaculata",
         !is.na(season))

obs_stats_saal = sample_stats(bd_model_saal) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_saal, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_saal, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_saal, obs_stats_saal, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_saal, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_saal, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_saal, spec_name))

# model_report(m_zln_saal)
```

```{r}
# flotator
spec_name = "Silverstoneia flotator"

m_zln_sifl = load_model(6)

draws_sifl = collect_draws(m_zln_sifl) %>%
  mutate(taxon_capture = spec_name)

density_mat_sifl = density_mat(log(0.3), 15, 100, draws_sifl) %>%
  mutate(taxon_capture = spec_name)

bd_model_sifl = bd_model %>%
  filter(taxon_capture == "silverstoneia_flotator",
         !is.na(season))

obs_stats_sifl = sample_stats(bd_model_sifl) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# prevalence
## observed prevalence
(plo1_1 = plot_prev_obs(obs_stats_sifl, spec_name))
## modeled prevalence 
(plot_2 = plot_prev_mod(draws_sifl, spec_name))

# infected Bd load
## observed log load
(plot_3 = plot_load_obs(bd_model_sifl, obs_stats_sifl, spec_name))
## modeled log load
(plot_4 = plot_load_mod(draws_sifl, spec_name))

# modeled distributions
## pdf
(plot_5 = plot_pdf(density_mat_sifl, spec_name))
## ccdf
(plot_6 = plot_ccdf(density_mat_sifl, spec_name))

# model_report(m_zln_sifl)
```

# combined plots
```{r}
#| fig-width: 12
#| fig-height: 6

# pps_all = bind_rows(pps_atva,
#                     pps_coma,
#                     pps_liwa,
#                     pps_rhha,
#                     pps_saal,
#                     pps_sifl)
# 
# mod_stats_all = bind_rows(mod_stats_atva,
#                           mod_stats_coma,
#                           mod_stats_liwa,
#                           mod_stats_rhha,
#                           mod_stats_saal,
#                           mod_stats_sifl)

obs_stats_all = bind_rows(
  # obs_stats_atva,
  obs_stats_coma,
  obs_stats_liwa,
  obs_stats_rhha,
  obs_stats_saal,
  obs_stats_sifl) %>%
  mutate(label_y = ifelse(life_stage_simple == "adult", 0.95, 0.91))

draws_all = bind_rows(
  # draws_atva,
  draws_coma,
  draws_liwa,
  draws_rhha,
  draws_saal,
  draws_sifl)

density_mat_all = bind_rows(
  # density_mat_atva,
  density_mat_coma,
  density_mat_liwa,
  density_mat_rhha,
  density_mat_saal,
  density_mat_sifl)


bd_model_all = bd_model %>%
  filter(!is.na(season),
         taxon_capture != "atelopus_varius") %>%
  mutate(taxon_capture = str_to_sentence(gsub("_", " ", taxon_capture)))

# observed prevalence
ggplot(obs_stats_all, aes(y = bd_prevalence, x = season, color = life_stage_simple, linetype = season)) +
  geom_point(position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                width = 0.2,
                position = position_dodge(width = 0.5)) +
  theme_minimal() +
  ggtitle("Observed prevalence") +
  xlab("Season") +
  ylab("Bd prevalence [-]\n(with 95% CI)") +
  labs(color = "Life stage") +
  geom_text(aes(label = paste0("n=", n),  y = label_y),
          position = position_dodge(width = 0.5)) +
  ylim(0, 1) +
  facet_grid(. ~ taxon_capture)

# model prevalence
ggplot(draws_all, aes(p0, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot(coef = NULL) + 
  theme_minimal() +
  ggtitle("Modeled prevalence") +
  xlab("Season") +
  ylab("Bd prevalence [-]") +
  labs(color = "Life stage") +
  ylim(0, 1) +
  facet_grid(. ~ taxon_capture)

# obsevation bd load
ggplot(bd_model_all %>%
         filter(bd_load > 0), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Observed Bd-positive load") +
  xlab("Season") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  geom_text(
    data = obs_stats_all,
    aes(
      x = season,
      y = max(bd_model_all$log_bd_load) * 1.10 * label_y,
      label = paste0("n=", n),
      group = life_stage_simple
    ),
    position = position_dodge(width = 0.75),
    vjust = 0
  ) +
  ylim(log(0.3), 20) +
  facet_grid(. ~ taxon_capture)

# model bd load

ggplot(draws_all, aes(b, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Modeled Bd-positive load") +
  xlab("Season") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  ylim(log(0.3), 20) +
  facet_grid(. ~ taxon_capture)

# PDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = pdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple,
                            linetype = season)) +
  geom_ribbon(aes(ymin = pdf_lower,
                  ymax = pdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled PDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage",
       linetype = "Season") +
  xlab("log(Bd load) [-]") +
  ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0)) +
  facet_grid(. ~ taxon_capture)

# PDF -- facet by life_stage & season
ggplot(density_mat_all, aes(x = density,
                            y = pdf_median,
                            color = taxon_capture, 
                            fill = taxon_capture)) +
  geom_ribbon(aes(ymin = pdf_lower,
                  ymax = pdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled PDF of Bd-positive load") +
  labs(color = "Species",
       fill = "Species") +
  xlab("log(Bd load) [-]") +
  ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0)) +
  facet_grid(life_stage_simple ~ season)

# CCDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = ccdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple,
                            linetype = season)) +
  geom_ribbon(aes(ymin = ccdf_lower,
                  ymax = ccdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled CCDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage",
       linetype = "Season") +
  xlab("log(Bd load) [-]") +
  ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0)) +
  ylim(0, 1) +
  facet_grid(. ~ taxon_capture)

# CCDF -- facet by life_stage & season
ggplot(density_mat_all, aes(x = density,
                            y = ccdf_median,
                            color = taxon_capture, 
                            fill = taxon_capture)) +
  geom_ribbon(aes(ymin = ccdf_lower,
                  ymax = ccdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled CCDF of Bd-positive load") +
  labs(color = "Species",
       fill = "Species") +
  xlab("log(Bd load) [-]") +
  ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 15), expand = c(0, 0)) +
  ylim(0, 1) +
  facet_grid(life_stage_simple ~ season)

```

```{r}
# dummy box
```

# discussion
 * bled & blipps, table 3 como guia de factores/caracteristicas
 * Ana Longo -- sequia aumenta infeccion, accumulacion de ranas arededor de pozos, sube el contactp
 * Jordan Gas (Jaime)n 2022 - experiemento de aumentar humedad, ver el effecto en Bd
 
# next steps:
  * include error/uncertainty in visualizations
  * change min/max viz for uncertainty model vals to match whiskers for obs
  * run analysis for species which only have data from 1 season
 