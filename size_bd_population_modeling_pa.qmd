---
title: "Size vs. Bd modeling: PanamÃ¡ preliminary results"
author: Cob Staines
date: 2025-09-15
format:
  html:
    toc: true
df-print: kable
bibliography: references.bib
csl: ecology.csl
---
# Introduction

## Motivation

Patterns of greater Bd load in recently metamorphosed individuals have been documented in some cases[@adams_chytridiomycosis-induced_2020] [@humphries_immune_2022] [@humphries_chytridiomycosis_2024] [@humphries_chytridiomycosis_2025] (and the opposite pattern in others[@bradley_host_2019]), with possible implications for:

  - population dynamics (Q2)
  - assessing Bd resistance/tolerance mechanisms (Q3)
  - resilience trajectory assessment (Q1)

... with the goal of complementing ongoing RIBBiTR research efforts

## Working hypotheses:

  a. Younger individuals are more likely to be infected with Bd than older individuals across species
  b. Younger individuals are more likely to carry higher Bd loads than older individuals across species

# Methods
## Setup
```{r}
#| eval: true
#| output: true
#| code-fold: true
#| code-summary: "Show setup code"

# setup
librarian::shelf(tidyverse, dbplyr, here, janitor, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, brms, tidybayes, ggplot2)

## Connect to DB
dbcon = hopToDB("ribbitr")

# load populations
data_pop = read.csv(here("data", "sn_site_pop_2025-05-15.csv")) %>%
  rename(population = pop_id) %>%
  mutate(population = ifelse(!is.na(population), paste0(as.character(population), "_pop"), NA_character_))

# table pointers
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))

bd_sample = db_sample %>%
  right_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(sample_type == "bd")
```
## Data selection
### Classifying by life stage
These analysis were carried out for post-metamorphic individuals only. Individuals were classified as "adult" or "subadult" with a threshold snout-vent-length (SVL [mm]), identified independently for each species from the literature (see data collection code for specific thresholds used and sources).

### Classification by season
The data were also classified into two seasons:

  - Lluvia (wet) -- May - August
  - Seca (dry) -- October - January
  
### Classification by population
"Populations" were defined at the region level.
  
### Species selection criteria:
Species were were included if at least 14 adult AND subadult each present per species, in at least one season


```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show data collection code"

# identify populations
bd_population = bd_sample %>%
  # filter(!is.na(svl_mm) | !is.na(body_mass_g)) %>%
  filter(country == "panama",
         !(life_stage %in% c("eggmass", "tadpole")),
         !is.na(svl_mm)) %>%
  mutate(population = region,
         tax_pop = paste0(taxon_capture, "_", population),
         year = year(date),
         life_stage_simple = case_when(
           # Savage 1972 & Crump 1988
           ((taxon_capture == "atelopus_varius") & (svl_mm >= 25)) ~ "adult",
           ((taxon_capture == "atelopus_varius") & (svl_mm < 25)) ~ "subadult",
           # Lynch and Myers 1983
           ((taxon_capture == "craugastor_crassidigitus") & (svl_mm >= 20.2)) ~ "adult",
           ((taxon_capture == "craugastor_crassidigitus") & (svl_mm < 20.2)) ~ "subadult",
           # Lynch and Myers 1983
           ((taxon_capture == "craugastor_fitzingeri") & (svl_mm >= 23.5)) ~ "adult",
           ((taxon_capture == "craugastor_fitzingeri") & (svl_mm < 23.5)) ~ "subadult",
           # Amphibiaweb
           ((taxon_capture == "colostethus_panamansis") & (svl_mm >= 18.8)) ~ "adult",
           ((taxon_capture == "colostethus_panamansis") & (svl_mm < 18.8)) ~ "subadult",
           # Leenders 2001
           ((taxon_capture == "dendrobates_auratus") & (svl_mm >= 25)) ~ "adult",
           ((taxon_capture == "dendrobates_auratus") & (svl_mm < 25)) ~ "subadult",
           # Amphibiaweb
           ((taxon_capture == "espadarana_prosoblepon") & (svl_mm >= 21)) ~ "adult",
           ((taxon_capture == "espadarana_prosoblepon") & (svl_mm < 21)) ~ "subadult",
           # Basante 2025
           ((taxon_capture == "lithobates_warszewitschii") & (svl_mm >= 35)) ~ "adult",
           ((taxon_capture == "lithobates_warszewitschii") & (svl_mm < 35)) ~ "subadult",
           # Savage 2002
           ((taxon_capture == "rhaebo_haematiticus") & (svl_mm >= 42)) ~ "adult",
           ((taxon_capture == "rhaebo_haematiticus") & (svl_mm < 42)) ~ "subadult",
           # Savage 2002
           ((taxon_capture == "sachatamia_albomaculata") & (svl_mm >= 20.5)) ~ "adult",
           ((taxon_capture == "sachatamia_albomaculata") & (svl_mm < 20.5)) ~ "subadult",
           # Ibunez & Smith 1995
           ((taxon_capture == "silverstoneia_flotator") & (svl_mm >= 15.1)) ~ "adult",
           ((taxon_capture == "silverstoneia_flotator") & (svl_mm < 15.1)) ~ "subadult",
           # Duellman, W. E. 2001
           ((taxon_capture == "smilisca_sila") & (svl_mm >= 31.6)) ~ "adult",
           ((taxon_capture == "smilisca_sila") & (svl_mm < 31.6)) ~ "subadult",
           .default = NA_character_
         ))

# spec_check = bd_population %>%
#   group_by(taxon_capture, life_stage) %>%
#   summarise(n = n()) %>%
#   arrange(desc(n)) %>%
#   collect() %>%
#   pivot_wider(names_from = "life_stage",
#               values_from = "n")

bd_species_valid = bd_population %>%
  group_by(taxon_capture, life_stage_simple) %>%
  summarise(ls_gte_14 = n() >= 14,
            .groups = "drop") %>%
  group_by(taxon_capture) %>%
  filter(sum(as.integer(ls_gte_14)) == 2) %>%
  ungroup() %>%
  select(taxon_capture) %>%
  left_join(bd_population, by = c("taxon_capture")) %>%
  group_by(taxon_capture) %>%
  summarise(count = n(),
            sample_count = n(),
            year_first = min(year),
            year_last = max(year),
            year_count = n_distinct(year),
            .groups = "drop") %>%
  collect()

# selection criteria
## - 60 samples per population
## - 3 years of sampling
## - 2 populations per species
## - at least 15 each adult and subadult per population

# determine populations which meet criteria
bd_population_valid = bd_population %>%
  group_by(population, taxon_capture, life_stage_simple) %>%
  summarise(ls_gt_15 = n() >= 15,
            .groups = "drop") %>%
  group_by(population, taxon_capture) %>%
  filter(sum(as.integer(ls_gt_15)) == 2) %>%
  left_join(bd_population, by = c("taxon_capture", "population")) %>%
  group_by(population, region, country, taxon_capture) %>%
  summarise(count = n(),
            sample_count = n(),
            year_first = min(year),
            year_last = max(year),
            year_count = n_distinct(year),
            .groups = "drop") %>%
  filter(sample_count >= 60,
         year_count >= 3) %>%
  group_by(taxon_capture) %>%
  mutate(population_count = n()) %>%
  ungroup() %>%
  # filter(population_count >= 2) %>%
  arrange(country, taxon_capture, desc(sample_count)) %>%
  collect()

# # join with bd data, select
# bd_sample_valid = bd_population %>%
#   filter(population %in% bd_population_valid$population &
#            taxon_capture %in% bd_population_valid$taxon_capture) %>%
#   left_join(db_bd %>%
#               group_by(sample_id) %>%
#               summarise(bd_swab_count = n(),
#                         bd_detected = any(detected),
#                         bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
#                         .groups = "drop"),
#             by = "sample_id") %>%
#   mutate(svl_mm_noise = svl_mm + runif(1) -.5) %>%
#   select(sample_id,
#          bd_swab_count,
#          bd_detected,
#          bd_mean_its1_copies_per_swab,
#          capture_id,
#          taxon_capture,
#          life_stage,
#          life_stage_simple,
#          svl_mm,
#          body_mass_g,
#          sex,
#          survey_id,
#          start_timestamp_utc,
#          date,
#          site,
#          site_id,
#          geographic_area,
#          population,
#          tax_pop,
#          region,
#          country) %>%
#   collect() %>%
#   mutate(month = month(date),
#                 season = case_match(month,
#                                     c(5, 6, 7, 8) ~ "lluvia",
#                                     c(10, 11, 12, 1) ~ "seca",
#                                     .default = NA_character_),
#          svl_mm_noise = svl_mm + runif(n(), min = -0.5, max = 0.5)) %>%
#   filter(!(taxon_capture == "silverstoneia_flotator" & svl_mm > 100))

bd_sample_valid = bd_population %>%
  filter(taxon_capture %in% bd_species_valid$taxon_capture) %>%
  left_join(db_bd %>%
              filter(!is.na(detected)) %>%
              group_by(sample_id) %>%
              summarise(bd_swab_count = n(),
                        bd_detected = any(detected),
                        bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
                        .groups = "drop"),
            by = "sample_id") %>%
  select(sample_id,
         bd_swab_count,
         bd_detected,
         bd_mean_its1_copies_per_swab,
         capture_id,
         taxon_capture,
         life_stage,
         life_stage_simple,
         svl_mm,
         body_mass_g,
         sex,
         survey_id,
         start_timestamp_utc,
         date,
         site,
         site_id,
         geographic_area,
         population,
         tax_pop,
         region,
         country) %>%
  collect() %>%
  mutate(month = month(date),
                season = case_match(month,
                                    c(5, 6, 7, 8) ~ "lluvia",
                                    c(10, 11, 12, 1) ~ "seca",
                                    .default = NA_character_),
         svl_mm_noise = svl_mm + runif(n(), min = -0.5, max = 0.5)) %>%
  filter(!(taxon_capture == "silverstoneia_flotator" & svl_mm > 100))

# combinations to drop
taxon_season_mask = data.frame(
  taxon_capture = c("atelopus_varius",
                    "craugastor_crassidigitus",
                    "craugastor_fitzingeri",
                    "espadarana_prosoblepon",
                    "sachatamia_albomaculata",
                    "smilisca_sila"),
  season = c("seca")
)


bd_model = bd_sample_valid %>%
  anti_join(taxon_season_mask, by = c("taxon_capture", "season")) %>%
  filter(!is.na(bd_mean_its1_copies_per_swab),
         !is.na(svl_mm)) %>%
  mutate(bd_load = bd_mean_its1_copies_per_swab,
         # log_bd_load = log(bd_load + 1),
         log_bd_load = log(bd_load)) %>%
  select(bd_load,
         log_bd_load,
         bd_detected,
         svl_mm,
         svl_mm_noise,
         site,
         population,
         taxon_capture,
         tax_pop,
         life_stage,
         life_stage_simple,
         date,
         season,
         population,
         region,
         country)

head(bd_model)
```

## Descriptive stats of data
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show selected data stats code"

(bd_model_stats = bd_model %>%
  filter(!is.na(season)) %>%
  group_by(taxon_capture, country, season) %>%
  summarise(regions = paste(sort(unique(region)), collapse = ", "),
            population_n = n_distinct(population),
            site_n = n_distinct(site),
            year_first = year(min(date)),
            year_last = year(max(date)),
            year_count = n_distinct(year(date)),
            adult_n = sum(life_stage_simple == "adult"),
            subadult_n = sum(life_stage_simple == "subadult"),
            .groups = "drop") %>%
  arrange(country,
          taxon_capture))

```

## Modeling
I modeled Bd load using a Baysian zero-inflated log-normal model [@schrock2025fungi] with fixed effects of life stage and season, and considering population as a random effect. The "hurdle" infection probability (hu) and the variability in Bd load (sigma) are allowed to vary with life stage and season as well. 

```{r}
#| eval: false
#| code-fold: true
#| code-summary: "Show model code"

run_m2_ltp = function(taxon){
  # colostethus_panamansis
  m2_ltp <- brm(
    formula = bf(
      bd_load ~ 1 + life_stage_simple * season + (1 | population),
      hu ~ 1 + life_stage_simple * season + (1 | population),
      sigma ~ 1 + life_stage_simple * season
    ),
    data = bd_model %>%
      filter(taxon_capture == taxon),
    family = hurdle_lognormal(),
    chains = 4,
    iter = 4000,
    warmup = 1000,
    cores = 4,
    control = list(adapt_delta = 0.95, max_treedepth = 12),
    seed = 123
  )
}

run_m2_ltp_1s = function(taxon){
  # colostethus_panamansis
  m2_ltp <- brm(
    formula = bf(
      bd_load ~ 1 + life_stage_simple + (1 | population),
      hu ~ 1 + life_stage_simple + (1 | population),
      sigma ~ 1 + life_stage_simple
    ),
    data = bd_model %>%
      filter(taxon_capture == taxon),
    family = hurdle_lognormal(),
    chains = 4,
    iter = 4000,
    warmup = 1000,
    cores = 4,
    control = list(adapt_delta = 0.95, max_treedepth = 12),
    seed = 123
  )
}

# # atelopus
taxon_m = "atelopus_varius"
output_m = "model_results_zln_life_tax_sea_pop_atva.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

# colos
taxon_m = "colostethus_panamansis"
output_m = "model_results_zln_life_tax_sea_pop_copa.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# crassidigitus
taxon_m = "craugastor_crassidigitus"
output_m = "model_results_zln_life_tax_sea_pop_crcr.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

# crassidigitus
taxon_m = "craugastor_fitzingeri"
output_m = "model_results_zln_life_tax_sea_pop_crfi.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

# crassidigitus
taxon_m = "espadarana_prosoblepon"
output_m = "model_results_zln_life_tax_sea_pop_espr.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

# wartz
taxon_m = "lithobates_warszewitschii"
output_m = "model_results_zln_life_tax_sea_pop_liwa.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# rhaebo
taxon_m = "rhaebo_haematiticus"
output_m = "model_results_zln_life_tax_sea_pop_rhha.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# albomac
taxon_m = "sachatamia_albomaculata"
output_m = "model_results_zln_life_tax_sea_pop_saal.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

# flotator
taxon_m = "silverstoneia_flotator"
output_m = "model_results_zln_life_tax_sea_pop_sifl.rds"
m2_ltp = run_m2_ltp(taxon_m)
saveRDS(m2_ltp, file = output_m)

# flotator
taxon_m = "smilisca_sila"
output_m = "model_results_zln_life_tax_sea_pop_smsi.rds"
m2_ltp = run_m2_ltp_1s(taxon_m)
saveRDS(m2_ltp, file = output_m)

```

## Processing and visualization
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show processing & visualization functions"

extract_abbr <- function(taxon) {
  parts <- strsplit(taxon, "_")[[1]]
  genus_abbr <- substr(parts[1], 1, 2)
  species_abbr <- substr(parts[2], 1, 2)
  paste0(genus_abbr, species_abbr)
}

load_model = function(taxon, template = "model_results_zln_life_tax_sea_pop_xxxx.rds"){
  filename = gsub("xxxx", extract_abbr(taxon), template)
  cat(taxon, ":\n\t", filename, "\n")
  return(readRDS(filename))
}

model_report = function(model_m){
  summary(model_m)
  plot((model_m), ask = FALSE)
  plot(conditional_effects(model_m), ask = FALSE)
  pp_check(model_m) +
    scale_x_log10()
}
get_species_name = function(taxon) {
  species_name = str_to_sentence(gsub("_", " ", taxon))
}

samp_pos = function(m_zln, lifestage, season, n, s = 1){
  pp = data.frame(
    life_stage_simple = lifestage,
    season = season,
    population = "NA"
  ) %>%
    slice(rep(1:n(), s))
  
  p_samp = posterior_predict(m_zln,
                             newdata = pp,
                             ndraws = n,
                             allow_new_levels = TRUE)
}

# draws
collect_draws = function(m_spec){
  m_spec %>%
    spread_draws(b_Intercept,
                 b_sigma_Intercept,
                 b_hu_Intercept,
                 b_life_stage_simplesubadult,
                 b_seasonseca,
                 `b_life_stage_simplesubadult:seasonseca`,
                 b_sigma_life_stage_simplesubadult,
                 b_sigma_seasonseca,
                 `b_sigma_life_stage_simplesubadult:seasonseca`,
                 b_hu_life_stage_simplesubadult,
                 b_hu_seasonseca,
                 `b_hu_life_stage_simplesubadult:seasonseca`,
                 sd_population__Intercept,
                 sd_population__hu_Intercept) %>%
    mutate(b_adult_lluvia = b_Intercept,
           b_adult_seca = b_Intercept + b_seasonseca,
           b_subadult_lluvia = b_Intercept + b_life_stage_simplesubadult,
           b_subadult_seca = b_Intercept + b_life_stage_simplesubadult + b_seasonseca + `b_life_stage_simplesubadult:seasonseca`,
           b_hu_adult_lluvia = b_hu_Intercept,
           b_hu_adult_seca = b_hu_Intercept + b_hu_seasonseca,
           b_hu_subadult_lluvia = b_hu_Intercept + b_hu_life_stage_simplesubadult,
           b_hu_subadult_seca = b_hu_Intercept + b_hu_life_stage_simplesubadult + b_hu_seasonseca + `b_hu_life_stage_simplesubadult:seasonseca`,
           b_sigma_adult_lluvia = b_sigma_Intercept,
           b_sigma_adult_seca = b_sigma_Intercept + b_sigma_seasonseca,
           b_sigma_subadult_lluvia = b_sigma_Intercept + b_sigma_life_stage_simplesubadult,
           b_sigma_subadult_seca = b_sigma_Intercept + b_sigma_life_stage_simplesubadult + b_sigma_seasonseca + `b_sigma_life_stage_simplesubadult:seasonseca`) %>%
    select(.draw,
           b_adult_lluvia,
           b_adult_seca,
           b_subadult_lluvia,
           b_subadult_seca,
           b_hu_adult_lluvia,
           b_hu_adult_seca,
           b_hu_subadult_lluvia,
           b_hu_subadult_seca,
           b_sigma_adult_lluvia,
           b_sigma_adult_seca,
           b_sigma_subadult_lluvia,
           b_sigma_subadult_seca,
           sd_population__Intercept,
           sd_population__hu_Intercept) %>%
    pivot_longer(cols = c(b_adult_lluvia,
                          b_adult_seca,
                          b_subadult_lluvia,
                          b_subadult_seca,
                          b_hu_adult_lluvia,
                          b_hu_adult_seca,
                          b_hu_subadult_lluvia,
                          b_hu_subadult_seca,
                          b_sigma_adult_lluvia,
                          b_sigma_adult_seca,
                          b_sigma_subadult_lluvia,
                          b_sigma_subadult_seca),
                 values_to = "param") %>% 
    mutate(
      param_name = case_when(
        grepl("b_hu", name) ~ "b_hu",
        grepl("b_sigma", name) ~ "b_sigma",
        grepl("b_", name) ~ "b",
        .default = NA_character_),
      life_stage_simple = case_when(
        grepl("subadult", name) ~ "subadult",
        grepl("adult", name) ~ "adult",
        .default = NA_character_),
      season = case_when(
        grepl("lluvia", name) ~ "lluvia",
        grepl("seca", name) ~ "seca",
        .default = NA_character_)) %>%
    pivot_wider(id_cols = c(.draw, life_stage_simple, season, sd_population__Intercept, sd_population__hu_Intercept),
                values_from = param,
                names_from = param_name) %>%
    mutate(p0 = plogis(b_hu),
           prevalence = 1 - p0,
           sigma = exp(b_sigma),
           sd_eff_bd_load = sqrt(sigma^2 + sd_population__Intercept^2)) %>%
    rename(sd_eff_hu = sd_population__hu_Intercept)
}

collect_draws_1s = function(m_spec){
  m_spec %>%
    spread_draws(b_Intercept,
                 b_sigma_Intercept,
                 b_hu_Intercept,
                 b_life_stage_simplesubadult,
                 b_sigma_life_stage_simplesubadult,
                 b_hu_life_stage_simplesubadult,
                 sd_population__Intercept,
                 sd_population__hu_Intercept) %>%
    mutate(b_adult_lluvia = b_Intercept,
           b_subadult_lluvia = b_Intercept + b_life_stage_simplesubadult,
           b_hu_adult_lluvia = b_hu_Intercept,
           b_hu_subadult_lluvia = b_hu_Intercept + b_hu_life_stage_simplesubadult,
           b_sigma_adult_lluvia = b_sigma_Intercept,
           b_sigma_subadult_lluvia = b_sigma_Intercept + b_sigma_life_stage_simplesubadult) %>%
    select(.draw,
           b_adult_lluvia,
           b_subadult_lluvia,
           b_hu_adult_lluvia,
           b_hu_subadult_lluvia,
           b_sigma_adult_lluvia,
           b_sigma_subadult_lluvia,
           sd_population__Intercept,
           sd_population__hu_Intercept,
           sd_population__Intercept,
           sd_population__hu_Intercept) %>%
    pivot_longer(cols = c(b_adult_lluvia,
                          b_subadult_lluvia,
                          b_hu_adult_lluvia,
                          b_hu_subadult_lluvia,
                          b_sigma_adult_lluvia,
                          b_sigma_subadult_lluvia),
                 values_to = "param") %>% 
    mutate(
      param_name = case_when(
        grepl("b_hu", name) ~ "b_hu",
        grepl("b_sigma", name) ~ "b_sigma",
        grepl("b_", name) ~ "b",
        .default = NA_character_),
      life_stage_simple = case_when(
        grepl("subadult", name) ~ "subadult",
        grepl("adult", name) ~ "adult",
        .default = NA_character_)) %>%
    pivot_wider(id_cols = c(.draw, life_stage_simple, sd_population__Intercept, sd_population__hu_Intercept),
                values_from = param,
                names_from = param_name) %>%
    mutate(p0 = plogis(b_hu),
           prevalence = 1 - p0,
           sigma = exp(b_sigma),
           sd_eff_bd_load = sqrt(sigma^2 + sd_population__Intercept^2)) %>%
    rename(sd_eff_hu = sd_population__hu_Intercept)
}


density_mat = function(lower, upper, len, draws){
  density_grid = seq(lower, upper, length.out = len)
  
  grouped_draws = draws %>%
    group_by(life_stage_simple, season) %>%
    group_split()
  
  group_summaries = map(grouped_draws, function(group_df) {
    # Get the group labels
    life_stage = unique(group_df$life_stage_simple)
    season = unique(group_df$season)
    
    # Compute density matrices
    pdf_density_mat = pmap(
      list(group_df$b, group_df$sigma, group_df$p0),
      function(b, sigma, p0) {
        dnorm(density_grid, mean = b, sd = sigma) * (1 - p0)
      }
    ) %>%
      simplify2array() %>%
      t()
    
    ccdf_density_mat = pmap(
      list(group_df$b, group_df$sigma, group_df$p0),
      function(b, sigma, p0) {
        (1 - pnorm(density_grid, mean = b, sd = sigma)) * (1 - p0)
      }
    ) %>%
      simplify2array() %>%
      t()
    
    
    # Summary statistics:
    pdf_q.5 = apply(pdf_density_mat, 2, quantile, probs = 0.5)
    pdf_q.25 = apply(pdf_density_mat, 2, quantile, probs = 0.25)
    pdf_q.75 = apply(pdf_density_mat, 2, quantile, probs = 0.75)
    
    ccdf_q.5 = apply(ccdf_density_mat, 2, quantile, probs = 0.5)
    ccdf_q.25 = apply(ccdf_density_mat, 2, quantile, probs = 0.25)
    ccdf_q.75 = apply(ccdf_density_mat, 2, quantile, probs = 0.75)
    
    # Return a tidy tibble for plotting or analysis
    tibble(
      life_stage_simple = life_stage,
      season = season,
      density = density_grid,
      pdf_median = pdf_q.5,
      pdf_lower = pdf_q.25,
      pdf_upper = pdf_q.75,
      ccdf_median = ccdf_q.5,
      ccdf_lower = ccdf_q.25,
      ccdf_upper = ccdf_q.75
    )
  })
  
  summary_df <- bind_rows(group_summaries)
}

samp_pos = function(m_zln, lifestage, season, n){

  pp = data.frame(
    life_stage_simple = lifestage,
    season = season,
    population = "NA"
  )
  
  p_samp = posterior_predict(m_zln,
                             newdata = pp,
                             ndraws = n,
                             allow_new_levels = TRUE)

}

sample_posterior_life_sea = function(m_zln, species_name, n = 10000){
  ps_adult_lluvia = samp_pos(m_zln, "adult", "lluvia", n)
  ps_adult_seca = samp_pos(m_zln, "adult", "seca", n)
  ps_subadult_lluvia = samp_pos(m_zln, "subadult", "lluvia", n)
  ps_subadult_seca = samp_pos(m_zln, "subadult", "seca", n)

  df_samps_adult_lluvia = data.frame(
    life_stage_simple = "adult",
    season = "lluvia",
    bd_load = ps_adult_lluvia
  )

  df_samps_adult_seca = data.frame(
    life_stage_simple = "adult",
    season = "seca",
    bd_load = ps_adult_seca
  )

  df_samps_subadult_lluvia = data.frame(
    life_stage_simple = "subadult",
    season = "lluvia",
    bd_load = ps_subadult_lluvia
  )
  
  df_samps_subadult_seca = data.frame(
    life_stage_simple = "subadult",
    season = "seca",
    bd_load = ps_subadult_seca
  )

  df_samps = bind_rows(df_samps_adult_lluvia,
                       df_samps_adult_seca,
                       df_samps_subadult_lluvia,
                       df_samps_subadult_seca) %>%
    mutate(bd_load = ifelse(bd_load < 0.3, 0, bd_load),
           log_bd_load = log(bd_load + 1),
           taxon_capture = species_name)
}

sample_posterior_life_1s = function(m_zln, species_name, n = 10000){
  ps_adult_lluvia = samp_pos(m_zln, "adult", "lluvia", n)
  ps_subadult_lluvia = samp_pos(m_zln, "subadult", "lluvia", n)

  df_samps_adult_lluvia = data.frame(
    life_stage_simple = "adult",
    season = "lluvia",
    bd_load = ps_adult_lluvia
  )

  df_samps_subadult_lluvia = data.frame(
    life_stage_simple = "subadult",
    season = "lluvia",
    bd_load = ps_subadult_lluvia
  )

  df_samps = bind_rows(df_samps_adult_lluvia,
                       df_samps_subadult_lluvia) %>%
    mutate(bd_load = ifelse(bd_load < 0.3, 0, bd_load),
           log_bd_load = log(bd_load + 1),
           taxon_capture = species_name)
}

simulate_bd_load_fixed = function(draws, n_per_draw = 10) {
  draws %>%
    filter(!is.na(b),
           !is.na(sigma)) %>%
    group_by(.draw, life_stage_simple, season) %>%
    reframe(
      log_bd_load = rnorm(n_per_draw, mean = b, sd = sigma),
      .id = "sim_id"
    ) %>%
    ungroup()
}

wilson_ci = function(p_hat, n, conf.level = 0.95) {
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  denominator <- 1 + (z^2 / n)
  centre_adjusted_probability <- p_hat + (z^2 / (2 * n))
  adjusted_standard_deviation <- sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  
  lower_bound <- (centre_adjusted_probability - z * adjusted_standard_deviation) / denominator
  upper_bound <- (centre_adjusted_probability + z * adjusted_standard_deviation) / denominator
  
  return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}

wilson_ci_lower = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[1])
}

wilson_ci_upper = function(p_hat, n, conf.level = 0.95) {
  ws = wilson_ci(p_hat, n, conf.level)
  return(ws[2])
}

sample_stats = function(pps) {
  pps %>%
    group_by(life_stage_simple,
             season) %>%
    summarise(n = n(),
              n_pos = sum(bd_load > 0),
              bd_prevalence = sum(bd_load > 0) / n(),
              bd_prevalence_ci_lower = wilson_ci_lower(bd_prevalence, n(), 0.95),
              bd_prevalence_ci_upper = wilson_ci_upper(bd_prevalence, n(), 0.95),
              min_log_load_inf = min(log_bd_load[bd_load > 0]),
              q_25_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.25),
              q_50_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.50),
              q_75_log_load_inf = quantile(log_bd_load[bd_load > 0], probs = 0.75),
              max_log_load_inf = max(log_bd_load[bd_load > 0]),
              se = sqrt(bd_prevalence*(1-bd_prevalence)/n),
              .groups = "drop")
}

plot_prev_obs = function(obs_stats, species_name) {
  dodge_width = 0.5  # Adjust width as needed
  
  ggplot(obs_stats, aes(y = bd_prevalence, x = season, color = life_stage_simple, linetype = season)) +
    geom_point(position = position_dodge(width = dodge_width)) +   # dodge points side by side
    geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                  width = 0.2,
                  position = position_dodge(width = dodge_width)) +  # dodge error bars side by side, same width
    theme_minimal() +
    ggtitle(paste0("Observed prevalence: ", species_name)) +
    xlab("Season") +
    ylab("Bd prevalence [-]\n(with 95% CI)") +
    labs(color = "Life stage") +
    geom_text(aes(label = paste0("n=", n)),
              position = position_dodge(width = dodge_width + 0.5)) +  # dodge text labels similarly
    ylim(0, 1)
}

plot_prev_mod = function(draws_spec, species_name){
  ggplot(draws_spec, aes(prevalence, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot(coef = NULL) + 
    theme_minimal() +
    ggtitle(paste0("Modeled prevalence: ", species_name)) +
    xlab("Season") +
    ylab("Bd prevalence [-]\n") +
    labs(color = "Life stage") +
    ylim(0, 1)
}

plot_load_obs = function(bd_model_spec, obs_stats, species_name){
  ggplot(bd_model_spec %>%
           filter(bd_load > 0), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Observed Bd-positive load: ", spec_name)) +
    xlab("Season") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    geom_text(
      data = obs_stats,
      aes(
        x = season,
        y = q_50_log_load_inf,
        label = paste0("n=", n_pos),
        group = life_stage_simple
      ),
      position = position_dodge(width = .75),
      vjust = -0.25
    ) +
    ylim(log(0.3), 20)
}

# plot_load_mod = function(draws_spec, species_name) {
#   ggplot(draws_spec, aes(b, x = season, color = life_stage_simple, linetype = season)) +
#     geom_boxplot() + 
#     theme_minimal() +
#     ggtitle(paste0("Modeled Bd-positive load: ", species_name)) +
#     xlab("Season") +
#     ylab("log(Bd load) [-]") +
#     labs(color = "Life stage") +
#     ylim(log(0.3), 15)
# }

plot_load_mod = function(sim, species_name) {
  ggplot(sim %>%
           filter(log_bd_load > 0.3), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
    geom_boxplot() + 
    theme_minimal() +
    ggtitle(paste0("Modeled Bd-positive load: ", species_name)) +
    xlab("Season") +
    ylab("log(Bd load) [-]") +
    labs(color = "Life stage") +
    ylim(log(0.3), 20)
}

plot_pdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = pdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple,
                          linetype = season)) +
    geom_ribbon(aes(ymin = pdf_lower,
                    ymax = pdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("PDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage",
         linetype = "Season") +
    xlab("log(Bd load) [-]") +
    ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0))
}

plot_ccdf = function(density_mat, species_name) {
  ggplot(density_mat, aes(x = density,
                          y = ccdf_median,
                          color = life_stage_simple, 
                          fill = life_stage_simple,
                          linetype = season)) +
    geom_ribbon(aes(ymin = ccdf_lower,
                    ymax = ccdf_upper), 
                alpha = 0.15,
                color = NA) +
    geom_line() +
    theme_minimal() +
    ggtitle(paste0("CCDF of Bd-positive load: ", species_name)) +
    labs(color = "Life stage",
         fill = "Life stage",
         linetype = "Season") +
    xlab("log(Bd load) [-]") +
    ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
    scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
    ylim(0, 1)
}

```

# Results
Results are broken out first by species, then combined for comparison between species

## Atelopus varius
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: Show Atelopus varius code

taxon_m = "atelopus_varius"
spec_name = get_species_name(taxon_m)
m_zln_atva = load_model(taxon_m)

draws_atva = collect_draws_1s(m_zln_atva) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_atva = density_mat(log(0.3), 20, 100, draws_atva) %>%
  mutate(taxon_capture = spec_name)

# pps_atva = sample_posterior_life_1s(m_zln_atva, spec_name, 10000)

sim_load_atva = simulate_bd_load_fixed(draws_atva, 1)

bd_model_atva = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_atva = sample_stats(bd_model_atva) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_atva)
# model_report(m_zln_atva)
```

::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_atva, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_atva, spec_name))
```

### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_atva, obs_stats_atva, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_atva, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_atva, spec_name))
```
### Modeled Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_atva, spec_name))
```
:::

## Colostethus panamansis
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: Show Colostethus panamansis code

taxon_m = "colostethus_panamansis"
spec_name = get_species_name(taxon_m)
m_zln_copa = load_model(taxon_m)

draws_copa = collect_draws(m_zln_copa) %>%
  mutate(taxon_capture = spec_name)

density_mat_copa = density_mat(log(0.3), 20, 100, draws_copa) %>%
  mutate(taxon_capture = spec_name)

# pps_copa = sample_posterior_life_sea(m_zln_copa, spec_name, 10000)

sim_load_copa = simulate_bd_load_fixed(draws_copa, 1)

bd_model_copa = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_copa = sample_stats(bd_model_copa) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_copa)
# model_report(m_zln_copa)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_copa, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_copa, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_copa, obs_stats_copa, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_copa, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_copa, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_copa, spec_name))
```
:::

## Craugastor crassidigitus
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Craugastor crassidigitus code"

taxon_m = "craugastor_crassidigitus"
spec_name = get_species_name(taxon_m)
m_zln_crcr = load_model(taxon_m)

draws_crcr = collect_draws_1s(m_zln_crcr) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_crcr = density_mat(log(0.3), 20, 100, draws_crcr) %>%
  mutate(taxon_capture = spec_name)

# pps_crcr = sample_posterior_life_sea(m_zln_crcr, spec_name, 10000)

sim_load_crcr = simulate_bd_load_fixed(draws_crcr, 1)

bd_model_crcr = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_crcr = sample_stats(bd_model_crcr) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_crcr)
# model_report(m_zln_crcr)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_crcr, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_crcr, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_crcr, obs_stats_crcr, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_crcr, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_crcr, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_crcr, spec_name))
```
:::

## Craugastor fitzingeri
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Craugastor fitzingeri code"

taxon_m = "craugastor_fitzingeri"
spec_name = get_species_name(taxon_m)
m_zln_crfi = load_model(taxon_m)

draws_crfi = collect_draws_1s(m_zln_crfi) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_crfi = density_mat(log(0.3), 20, 100, draws_crfi) %>%
  mutate(taxon_capture = spec_name)

# pps_crfi = sample_posterior_life_sea(m_zln_crfi, spec_name, 10000)

sim_load_crfi = simulate_bd_load_fixed(draws_crfi, 1)

bd_model_crfi = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_crfi = sample_stats(bd_model_crfi) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_crfi)
# model_report(m_zln_crfi)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_crfi, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_crfi, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_crfi, obs_stats_crfi, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_crfi, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_crfi, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_crfi, spec_name))
```
:::

## Espadarana prosoblepon
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Espadarana prosoblepon code"

taxon_m = "espadarana_prosoblepon"
spec_name = get_species_name(taxon_m)
m_zln_espr = load_model(taxon_m)

draws_espr = collect_draws_1s(m_zln_espr) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_espr = density_mat(log(0.3), 20, 100, draws_espr) %>%
  mutate(taxon_capture = spec_name)

# pps_espr = sample_posterior_life_sea(m_zln_espr, spec_name, 10000)

sim_load_espr = simulate_bd_load_fixed(draws_espr, 1)

bd_model_espr = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_espr = sample_stats(bd_model_espr) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_espr)
# model_report(m_zln_espr)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_espr, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_espr, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_espr, obs_stats_espr, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_espr, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_espr, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_espr, spec_name))
```
:::

## Lithobates warszewitschii
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Lithobates warszewitschii code"

taxon_m = "lithobates_warszewitschii"
spec_name = get_species_name(taxon_m)
m_zln_liwa = load_model(taxon_m)

draws_liwa = collect_draws(m_zln_liwa) %>%
  mutate(taxon_capture = spec_name)

density_mat_liwa = density_mat(log(0.3), 20, 100, draws_liwa) %>%
  mutate(taxon_capture = spec_name)

# pps_liwa = sample_posterior_life_sea(m_zln_liwa, spec_name, 10000)

sim_load_liwa = simulate_bd_load_fixed(draws_liwa, 1)

bd_model_liwa = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_liwa = sample_stats(bd_model_liwa) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_liwa)
# model_report(m_zln_liwa)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_liwa, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_liwa, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_liwa, obs_stats_liwa, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_liwa, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_liwa, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_liwa, spec_name))
```
:::

## Rhaebo haematiticus
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Rhaebo haematiticus code"

taxon_m = "rhaebo_haematiticus"
spec_name = get_species_name(taxon_m)
m_zln_rhha = load_model(taxon_m)

draws_rhha = collect_draws(m_zln_rhha) %>%
  mutate(taxon_capture = spec_name)

density_mat_rhha = density_mat(log(0.3), 20, 100, draws_rhha) %>%
  mutate(taxon_capture = spec_name)

# pps_rhha = sample_posterior_life_sea(m_zln_rhha, spec_name, 10000)

sim_load_rhha = simulate_bd_load_fixed(draws_rhha, 1)

bd_model_rhha = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_rhha = sample_stats(bd_model_rhha) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_rhha)
# model_report(m_zln_rhha)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_rhha, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_rhha, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_rhha, obs_stats_rhha, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_rhha, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_rhha, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_rhha, spec_name))
```
:::

## Sachatamia albomaculata
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Sachatamia albomaculata code"

taxon_m = "sachatamia_albomaculata"
spec_name = get_species_name(taxon_m)
m_zln_saal = load_model(taxon_m)

draws_saal = collect_draws_1s(m_zln_saal) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_saal = density_mat(log(0.3), 20, 100, draws_saal) %>%
  mutate(taxon_capture = spec_name)

# pps_saal = sample_posterior_life_sea(m_zln_saal, spec_name, 10000)

sim_load_saal = simulate_bd_load_fixed(draws_saal, 1)

bd_model_saal = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_saal = sample_stats(bd_model_saal) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_saal)
# model_report(m_zln_saal)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_saal, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_saal, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_saal, obs_stats_saal, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_saal, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_saal, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_saal, spec_name))
```
:::

## Silverstoneia flotator
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Silverstoneia flotator code"

taxon_m = "silverstoneia_flotator"
spec_name = get_species_name(taxon_m)
m_zln_sifl = load_model(taxon_m)

draws_sifl = collect_draws(m_zln_sifl) %>%
  mutate(taxon_capture = spec_name)

density_mat_sifl = density_mat(log(0.3), 20, 100, draws_sifl) %>%
  mutate(taxon_capture = spec_name)

# pps_sifl = sample_posterior_life_sea(m_zln_sifl, spec_name, 10000)

sim_load_sifl = simulate_bd_load_fixed(draws_sifl, 1)

bd_model_sifl = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_sifl = sample_stats(bd_model_sifl) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_sifl)
# model_report(m_zln_sifl)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_sifl, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_sifl, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_sifl, obs_stats_sifl, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_sifl, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_sifl, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_sifl, spec_name))
```
:::

## Smilisca sila
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show Smilisca sila code"

taxon_m = "smilisca_sila"
spec_name = get_species_name(taxon_m)
m_zln_smsi = load_model(taxon_m)

draws_smsi = collect_draws_1s(m_zln_smsi) %>%
  mutate(taxon_capture = spec_name,
         season = "lluvia")

density_mat_smsi = density_mat(log(0.3), 20, 100, draws_smsi) %>%
  mutate(taxon_capture = spec_name)

# pps_smsi = sample_posterior_life_sea(m_zln_smsi, spec_name, 10000)

sim_load_smsi = simulate_bd_load_fixed(draws_smsi, 1)

bd_model_smsi = bd_model %>%
  filter(taxon_capture == taxon_m,
         !is.na(season))

obs_stats_smsi = sample_stats(bd_model_smsi) %>%
  mutate(src = "obs",
         taxon_capture = spec_name)

# summary(m_zln_smsi)
# model_report(m_zln_smsi)
```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
(plot_1 = plot_prev_obs(obs_stats_smsi, spec_name))
```
### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
(plot_2 = plot_prev_mod(draws_smsi, spec_name))
```
### Observed Bd load
```{r}
#| echo: false
#| warning: false
(plot_3 = plot_load_obs(bd_model_smsi, obs_stats_smsi, spec_name))
```
### Modeled Bd load
```{r}
#| echo: false
#| warning: false
(plot_4 = plot_load_mod(sim_load_smsi, spec_name))
```
### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
(plot_5 = plot_pdf(density_mat_smsi, spec_name))
```
### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
(plot_6 = plot_ccdf(density_mat_smsi, spec_name))
```
:::

## Combined results
```{r}
#| eval: true
#| echo: true
#| output: false
#| code-fold: true
#| code-summary: "Show combined results code"

# include sample size to allow filtering of results for low counts
bd_model_n = bd_model_stats %>%
  select(taxon_capture,
         season,
         adult_n,
         subadult_n) %>%
  pivot_longer(cols = c("adult_n", "subadult_n"),
               names_to = "life_stage_simple",
               values_to = "sample_n") %>%
  mutate(life_stage_simple = gsub("_n", "", life_stage_simple),
         taxon_capture = get_species_name(taxon_capture))

obs_stats_all = bind_rows(
  obs_stats_atva,
  obs_stats_copa,
  obs_stats_crcr,
  obs_stats_crfi,
  obs_stats_espr,
  obs_stats_liwa,
  obs_stats_rhha,
  obs_stats_saal,
  obs_stats_sifl,
  obs_stats_smsi) %>%
  mutate(label_y = ifelse(life_stage_simple == "adult", 1, 0.96)) %>%
  left_join(bd_model_n, by = c("taxon_capture", "life_stage_simple", "season"))

draws_all = bind_rows(
  draws_atva,
  draws_copa,
  draws_crcr,
  draws_crfi,
  draws_espr,
  draws_liwa,
  draws_rhha,
  draws_saal,
  draws_sifl,
  draws_smsi) %>%
  left_join(bd_model_n, by = c("taxon_capture", "life_stage_simple", "season"))

density_mat_all = bind_rows(
  density_mat_atva,
  density_mat_copa,
  density_mat_crcr,
  density_mat_crfi,
  density_mat_espr,
  density_mat_liwa,
  density_mat_rhha,
  density_mat_saal,
  density_mat_sifl,
  density_mat_smsi) %>%
  left_join(bd_model_n, by = c("taxon_capture", "life_stage_simple", "season"))

# pps_all = bind_rows(
#   pps_atva,
#   pps_copa,
#   pps_crcr,
#   pps_crfi,
#   pps_espr,
#   pps_liwa,
#   pps_rhha,
#   pps_saal,
#   pps_sifl,
#   pps_smsi) %>%
#   left_join(bd_model_n, by = c("taxon_capture", "life_stage_simple", "season"))

sim_load_all = bind_rows(
  sim_load_atva,
  sim_load_copa,
  sim_load_crcr,
  sim_load_crfi,
  sim_load_espr,
  sim_load_liwa,
  sim_load_rhha,
  sim_load_saal,
  sim_load_sifl,
  sim_load_smsi) %>%
  left_join(bd_model_n, by = c("taxon_capture", "life_stage_simple", "season"))

bd_model_all = bd_model %>%
  filter(!is.na(season)) %>%
  mutate(taxon_capture = str_to_sentence(gsub("_", " ", taxon_capture)))

```
::: {.panel-tabset}
### Observed Prevalence
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# observed prevalence
ggplot(obs_stats_all, aes(y = bd_prevalence, x = season, color = life_stage_simple, linetype = season)) +
  geom_point(position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(ymin = bd_prevalence_ci_lower, ymax = bd_prevalence_ci_upper),
                width = 0.2,
                position = position_dodge(width = 0.5)) +
  theme_minimal() +
  ggtitle("Observed prevalence") +
  xlab("Season") +
  ylab("Bd prevalence [-]\n(with 95% CI)") +
  labs(color = "Life stage") +
  geom_text(aes(label = paste0("n=", n),  y = label_y),
          position = position_dodge(width = 0.5)) +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Prevalence 
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# model prevalence
ggplot(draws_all, aes(prevalence, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot(coef = NULL) + 
  theme_minimal() +
  ggtitle("Modeled prevalence") +
  xlab("Season") +
  ylab("Bd prevalence [-]\n") +
  labs(color = "Life stage") +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Observed Bd load
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# obsevation bd load
ggplot(bd_model_all %>%
         filter(bd_load > 0), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Observed Bd-positive load") +
  xlab("Season") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  geom_text(
    data = obs_stats_all,
    aes(
      x = season,
      y = max(bd_model_all$log_bd_load) * label_y * 1.05,
      label = paste0("n=", n_pos),
      group = life_stage_simple
    ),
    position = position_dodge(width = 0.75),
    vjust = 0
  ) +
  ylim(log(0.3), 20) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Bd load
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# modeled bd load
ggplot(sim_load_all %>%
         filter(log_bd_load > 0.3), aes(log_bd_load, x = season, color = life_stage_simple, linetype = season)) +
  geom_boxplot() + 
  theme_minimal() +
  ggtitle("Modeled Bd-positive load") +
  xlab("Season") +
  ylab("log(Bd load) [-]") +
  labs(color = "Life stage") +
  ylim(log(0.3), 20) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))
```

### Modeled Bd load PDF
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# PDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = pdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple,
                            linetype = season)) +
  geom_ribbon(aes(ymin = pdf_lower,
                  ymax = pdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled PDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage",
       linetype = "Season") +
  xlab("log(Bd load) [-]") +
  ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))

# # PDF -- facet by life_stage & season
# ggplot(density_mat_all, aes(x = density,
#                             y = pdf_median,
#                             color = taxon_capture, 
#                             fill = taxon_capture)) +
#   geom_ribbon(aes(ymin = pdf_lower,
#                   ymax = pdf_upper), 
#               alpha = 0.15,
#               color = NA) +
#   geom_line() +
#   theme_minimal() +
#   ggtitle("Modeled PDF of Bd-positive load") +
#   labs(color = "Species",
#        fill = "Species") +
#   xlab("log(Bd load) [-]") +
#   ylab("Median probability density [-]\n(with 25th to 75th percentiles)") +
#   scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
#   facet_grid(life_stage_simple ~ season)
```

### Moded Bd load CCDF
```{r}
#| echo: false
#| warning: false
#| fig-width: 12
#| fig-height: 6
# CCDF -- facet by species
ggplot(density_mat_all, aes(x = density,
                            y = ccdf_median,
                            color = life_stage_simple, 
                            fill = life_stage_simple,
                            linetype = season)) +
  geom_ribbon(aes(ymin = ccdf_lower,
                  ymax = ccdf_upper), 
              alpha = 0.15,
              color = NA) +
  geom_line() +
  theme_minimal() +
  ggtitle("Modeled CCDF of Bd-positive load") +
  labs(color = "Life stage",
       fill = "Life stage",
       linetype = "Season") +
  xlab("log(Bd load) [-]") +
  ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
  scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
  ylim(0, 1) +
  facet_grid(. ~ gsub(" ", "\n", taxon_capture))

# # CCDF -- facet by life_stage & season
# ggplot(density_mat_all, aes(x = density,
#                             y = ccdf_median,
#                             color = taxon_capture, 
#                             fill = taxon_capture)) +
#   geom_ribbon(aes(ymin = ccdf_lower,
#                   ymax = ccdf_upper), 
#               alpha = 0.15,
#               color = NA) +
#   geom_line() +
#   theme_minimal() +
#   ggtitle("Modeled CCDF of Bd-positive load") +
#   labs(color = "Species",
#        fill = "Species") +
#   xlab("log(Bd load) [-]") +
#   ylab("Median complementary cumulative density (1 - CDF) [-]\n(with 25th to 75th percentiles)") +
#   scale_x_continuous(limits = c(log(0.3), 20), expand = c(0, 0)) +
#   ylim(0, 1) +
#   facet_grid(life_stage_simple ~ season)
```
:::


# Discussion
  - General patterns
    - Most species show greater Bd prevalence in juveniles, with some (A. varius, C. fitzingeri, R. haemataticus, S. sila) showing the opposite pattern
    - Most species show greater Bd-positive load in juveniles, with some (A. varius, R. haemataticus) showing the opposite pattern
    - Most species show greater Bd prevalence in the wet season, with some (A. varius, E. proseblepon, R. haemataticus) showing the opposite pattern
    - Most species show greater Bd-positive load in the dry season, with some (A. varius, E. proseblepon, L. warszewitschii) showing the oposite pattern (and S. flotator showing no obvious trend)
  - Bringing in more context (suggestions from Deli)
    - Bled & Blipps, table 3 como guia de factores/caracteristicas entre especies
    - Ana Longo -- sequia aumenta infeccion, accumulacion de ranas alrededor de pozos sube el contacto
    - Jordan Gas ( & Jaime) 2022 - experiemento de aumentar humedad, ver effecto en Bd
 
# Next steps:
  - Explore discrepancies between observations and models
  - Decide which species to exclude for low sample size
  - Expand analysis to Brazil, Pennsylvania, Sierra Nevada
 