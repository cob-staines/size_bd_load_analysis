---
title: "Sierra Resilience Trajectory Classification for Size v. Bd Analysis"
author: Cob Staines
date: 2025-10-01
format:
  html:
    toc: true
df-print: kable
bibliography: references.bib
csl: ecology.csl
---

# Setup
```{r}
#| eval: true
#| output: false
#| code-fold: true
#| code-summary: "Show setup code"

# setup
librarian::shelf(tidyverse, dbplyr, here, janitor, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, brms, loo, bayesplot, tidybayes, ggplot2)

## Connect to DB
dbcon <- hopToDB("ribbitr")

# load populations
data_pop = read.csv(here("data", "sn_site_pop_2_2025-09-19.csv")) %>%
  rename(population = pop_id) %>%
  mutate(population = if_else(!is.na(population), paste0(as.character(population), "_pop"), NA_character_),
         population = if_else(is.na(population), as.character(site), as.character(population)))

# table pointers
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))
db_hist = tbl(dbcon, Id("survey_data", "site_history"))

bd_sample = db_sample %>%
  right_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(sample_type == "bd")
```

## Define functions
For fuzzy grouping and confidence interval calcs
```{r}
#| eval: true
#| output: false
#| code-fold: true
#| code-summary: "Show function definitions"

# fuzzy grouping for identifying survey periods in time
fuzzy_grouping = function(x, delta){
  # Make groups of x if differences are less than or equal to delta
  # 
  # Parameters
  # ----------
  # x : array of values to be grouped
  # delta : difference in value that defines a group
  
  
  if(length(x) > 1){
    
    run_ind = diff(x) <= delta
    grouping = array(NA, dim=length(run_ind + 1))
    grouping[1] = 1
    for(i in 1:length(run_ind)){
      
      if(run_ind[i] == FALSE | is.na(run_ind[i])){
        grouping[i + 1] = grouping[i] + 1
      }
      else{
        grouping[i + 1] = grouping[i]
      }
      
    }
  } else{
    grouping = 1
  }
  
  return(grouping)

}

# binomial confidence interval
wilson_ci = function(x, n, conf.level = 0.95) {
  p_hat <- x / n
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  denominator <- 1 + (z^2 / n)
  centre_adjusted_probability <- p_hat + (z^2 / (2 * n))
  adjusted_standard_deviation <- sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  
  lower_bound <- (centre_adjusted_probability - z * adjusted_standard_deviation) / denominator
  upper_bound <- (centre_adjusted_probability + z * adjusted_standard_deviation) / denominator
  
  return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}

wilson_ci_lower = function(x, n, conf.level = 0.95) {
  ws = wilson_ci(x, n, conf.level)
  return(ws[1])
}

wilson_ci_upper = function(x, n, conf.level = 0.95) {
  ws = wilson_ci(x, n, conf.level)
  return(ws[2])
}

# normal confidence interval
normal_ci = function(x, conf.level = 0.95) {
  n <- length(x)
  mean_x <- mean(x)
  sd_x <- sd(x)
  
  alpha <- 1 - conf.level
  t_value <- qt(1 - alpha/2, df = n - 1)
  margin_error <- t_value * sd_x / sqrt(n)
  
  lower <- mean_x - margin_error
  upper <- mean_x + margin_error
  
  return(c(lower_bound = lower, upper_bound = upper))
}

normal_ci_lower = function(x, conf.level = 0.95) {
  no = normal_ci(x, conf.level)
  return(no[1])
}

normal_ci_upper = function(x, conf.level = 0.95) {
  no = normal_ci(x, conf.level)
  return(no[2])
}


```

# Methods

## Data selection & classification

1. Beginning with all Rana muscosa & Rana sierrae data, grouped by population
2. Filter out post-translocation data
3. Population selection criteria:

  - minimum 15 swabbed subadult and adult (each)
  - minimum 3 swab survey years
  
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show data selection code"

# identify populations
bd_population = bd_sample %>%
  filter(country == "usa",
         region == "california",
         life_stage != "tadpole",
         !is.na(taxon_capture %in% c("rana_muscosa", "rana_sierrae"))) %>%
  left_join(data_pop, by = "site", copy = TRUE) %>%
  mutate(tax_pop = paste0(taxon_capture, "_", population),
         year = year(date),
         life_stage_simple = life_stage,
         life_stage_simple = case_when(
           is.na(svl_mm) ~ life_stage,
           (svl_mm >= 40) ~ "adult",
           (svl_mm < 40) ~ "subadult",
           .default = life_stage))

# identify translocation release events by population
release_events = db_hist %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california",
         treatment_type %in% c("translocation_release", "reintroduction_release")) %>%
  collect() %>%
  left_join(data_pop, by = "site") %>%
  mutate(year = year(treatment_date),
         release_event = TRUE) %>%
  select(population,
         year,
         release_event) %>%
  distinct()

first_release_events =  release_events %>%
  group_by(population) %>%
  summarise(first_release_year = min(year),
            .groups = "drop")


# mask for populations/years after a release event
post_release_mask = expand_grid(unique(first_release_events$population),
                       seq(min(first_release_events$first_release_year), 2025)) %>%
  rename(population = 1,
         year = 2) %>%
  left_join(first_release_events, by = "population") %>%
  filter(year >= first_release_year) %>%
  select(-first_release_year)

# selection criteria for populations
## - 3 years of sampling
## - at least 15 each adult and subadult per population



bd_population_valid = bd_population %>%
  collect() %>%
  anti_join(post_release_mask, by = c("population", "year")) %>%
  group_by(population) %>%
  summarise(n_years = n_distinct(year),
            n_adult = sum(life_stage_simple == "adult"),
            n_subadult = sum(life_stage_simple == "subadult"),
            first_year = min(year),
            last_year = max(year),
            .groups = "drop") %>%
  filter(n_years >= 3,
         n_adult >= 15,
         n_subadult >= 15)

# pop_year_valid = bd_population %>%
#   distinct(population, year) %>%
#   anti_join(post_release_mask, by = c("population", "year"))
#   filter(population %in% bd_population_valid$population) %>%
#   collect() %>%
#   left_join(first_release_events, by = "population") %>%
#   filter(is.na(first_release_year) | !(year >= first_release_year)) %>%
#   select(population, year)
  
bd_site_valid = data_pop %>%
  filter(population %in% bd_population_valid$population)

bd_capture_valid = bd_population %>%
  anti_join(post_release_mask, by = c("population", "year"), copy = TRUE)

# all years of data for valid pops
year_valid = bd_capture_valid %>%
  distinct(population, year) %>%
  collect()

# all population - year combinations
pop_year = expand_grid(bd_population_valid$population,
                       unique(year_valid$year)) %>%
  rename(population = 1,
         year = 2)

# pass on to pop year
pop_year_tx = pop_year %>%
  left_join(first_release_events, by = c("population")) %>%
  arrange(population, year)

(bd_population_valid)

```

## Calculate adult abundance indicators

VES & CMR counts

  - Aggregated to survey-period using rolling 7-day window within each population & year
  - When multiple survey periods within a population-year, the greatest (max) count was used, identified independently for VES & CMR

```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show adult abundance indicator code"
# sites of interest
site_oi = db_site %>%
  filter(site %in% bd_site_valid$site)

# visits of interest
visit_oi = db_visit %>%
  left_join(site_oi, by = "site_id") %>%
  mutate(year = year(date)) %>%
  filter(visit_status == "suitable",
         year %in% year_valid$year) %>%
  select(visit_id,
         site,
         site_id,
         year,
         date,
         comments_visit) %>%
  collect() %>%
  left_join(data_pop, by = "site") %>%
  anti_join(post_release_mask, by = c("population", "year")) %>%
  arrange(population,
          date) %>%
  group_by(population, year) %>%
  mutate(survey_period = fuzzy_grouping(as.integer(date), 7)) %>% # consider surveys within a rolling 7 days to be within the same survey period
  ungroup()

# join with survey table
survey_oi = db_survey %>%
  filter(visit_id %in% visit_oi$visit_id,
         detection_type %in% c("capture", "visual")) %>%
  select(detection_type,
         detection_subtype,
         survey_quality,
         description,
         comments_survey,
         number_observers,
         survey_id,
         visit_id) %>%
  collect() %>%
  mutate(detection_type = ifelse(detection_type == "capture",
                                 detection_subtype,
                                 detection_type)) %>%
  select(-detection_subtype) %>%
  right_join(visit_oi, by = "visit_id") %>%
  arrange(site,
          date,
          survey_period)

# visual data pull
data_visual = survey_oi %>%
  filter(detection_type == "visual") %>%
  select(population,
         site,
         date,
         survey_period,
         year,
         survey_id,
         visit_id,
         detection_type,
         comments_survey,
         comments_visit) %>%
  left_join(db_ves %>%
               filter(life_stage == "adult",
                      visual_animal_state != "dead",
                      taxon_ves %in% c("rana_muscosa", "rana_sierrae")) %>%
               select(count_ves,
                      ves_id,
                      survey_id) %>%
               collect(), by = "survey_id") %>%
  mutate(count_ves = ifelse(is.na(count_ves), 0, count_ves))

# visual abundance calc (select max)
abundance_visual = data_visual %>%
  group_by(population,
           year,
           #date,
           survey_period
           ) %>%
  # rename(date_ves = date) %>%
  summarise(date_start_ves = first(date),
            ves_days = n_distinct(date),
            adult_count_visual = sum(count_ves),
            .groups = "drop") %>%
  arrange(population, year, desc(adult_count_visual)) %>%
  group_by(population,
           year) %>%
  slice_head(n = 1) %>% # select max count
  ungroup() %>%
  select(-survey_period)

# cmr data pull
data_cmr = survey_oi %>%
  filter(detection_type == "cmr") %>%
  select(population,
         site,
         date,
         survey_period,
         year,
         survey_id,
         visit_id,
         detection_type,
         comments_survey,
         comments_visit) %>%
  inner_join(db_capture %>%
               filter(life_stage == "adult",
                      capture_animal_state != "dead",
                      taxon_capture %in% c("rana_muscosa", "rana_sierrae")) %>%
               select(cmr_id,
                      capture_id,
                      survey_id,
                      life_stage,
                      capture_animal_state,
                      comments_capture) %>%
               collect(), by = "survey_id")

# cmr abundance calc
abundance_cmr = data_cmr %>%
  group_by(population,
           year,
           survey_period) %>%
  summarise(date_start_cmr = first(date),
            cmr_days = n_distinct(date),
            adult_count_cmr = n_distinct(cmr_id),
            .groups = "drop") %>%
  arrange(population, year, desc(adult_count_cmr)) %>%
  group_by(population,
           year) %>%
  slice_head(n = 1) %>%  # select max count
  ungroup() %>%
  select(-survey_period)

# join visual and cmr abundance data
abundance_stats = abundance_visual %>%
  full_join(abundance_cmr, by = c("population", "year"))

# join with pop_year_tx
pop_year_ab = pop_year_tx %>%
  left_join(abundance_stats, by = c("population", "year"))

head(abundance_stats)
```


## Calculate adult Bd metrics
All adult swabs, grouped by population & year:

  - adult swab count (n)
  - Bd prevalence (w/ 95% confidence intervals)
  - median Bd load (w/ 95% confidence intervals)
  
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show adult Bd metrics code"

bd_stats = bd_capture_valid %>%
  filter(life_stage_simple == "adult") %>%
  inner_join(db_bd %>%
              filter(!is.na(detected)) %>%
              group_by(sample_id) %>%
              summarise(bd_swab_count = n(),
                        bd_detected = any(detected),
                        bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
                        .groups = "drop"),
             by = "sample_id") %>%
  collect() %>%
  group_by(population,
           year) %>%
  summarise(adult_swab_n = n(),
            adult_bd_prevalence = sum(bd_detected) / n(),
            adult_bd_prevalence_ci_lower = wilson_ci_lower(sum(bd_detected), n(), conf.level = 0.95),
            adult_bd_prevalence_ci_upper = wilson_ci_upper(sum(bd_detected), n(), conf.level = 0.95),
            adult_positive_bd_load_median = median(bd_mean_its1_copies_per_swab[bd_detected]),
            adult_positive_bd_load_ci_lower = exp(normal_ci_lower(log(bd_mean_its1_copies_per_swab[bd_detected]), conf.level = 0.95)),
            adult_positive_bd_load_ci_upper = exp(normal_ci_upper(log(bd_mean_its1_copies_per_swab[bd_detected]), conf.level = 0.95)),
            .groups = "drop")

# join with pop_year_ab
pop_year_bd = pop_year_ab %>%
  left_join(bd_stats, by = c("population", "year")) %>%
  arrange(population, year)

head(bd_stats)

```

## Resilience Trajectory Classification
Resilience trajectories were classified at the population-year level using adult-only VES, CMR, Bd-Prevalence and Bd-load time series.

**Identification of Epizootic events**

Select 1st in time for each population:

  - Start year:
    - Bd prevalence >= 0.95 or...
    - median Bd load >= 24000 [ITS1 copies]
  - End year:
    - VES & CMR < 20
  - Event length 1 - 5 years
  - Minimum 90% population drop over event: (Median post-event VES) / (Median pre-event VES) <= 0.1
  
**Resilience trajectory classification**

For each population:

  - When Epizootic event identified:
    - before start year ~ "1-naive"
    - start year to end year ~ "2-epizootic"
    - after end year ~ "3-post-epizootic"
  - When no Epizootic event found:
    - median Bd prevalence across years < 0.5 ~ "1-naive"
    - median Bd prevalence across years >= 0.5 ~ "3-post-epizootic"
  - Post-epizootic was sub-classified as:
    - VES and CMR < 20 ~ "3a-persisting"
    - VES or CMR >= 20 ~ "3b-recovering"


```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show classification code"

# calculate swab counts
pop_adult_swab_counts = pop_year_bd %>%
  group_by(population) %>%
  summarize(adult_swab_n = sum(adult_swab_n, na.rm = TRUE))

# claculate epizootic classification criteria
epi_thresholds = pop_year_bd %>%
  arrange(population, year) %>%
  mutate(epi_prev = adult_bd_prevalence >= 0.95,
         epi_load = adult_positive_bd_load_median >= 24000,
         epi_thresh = (epi_load | epi_prev),
         low_count_ves = adult_count_visual < 20,
         low_count_cmr = adult_count_cmr < 20)%>%
  rowwise() %>%
  mutate(
    low_count = all(low_count_ves, low_count_cmr, na.rm = TRUE),
    low_count = if_else(is.na(adult_count_visual) & is.na(adult_count_cmr), NA, low_count)
  ) %>%
  ungroup()
  
# identify epizootic events
epi_events = epi_thresholds %>%
  # filter potential event starts to epi threshold years
  filter(epi_thresh) %>%
  select(population, year) %>%
  rename(start_year = year) %>%
  inner_join(epi_thresholds %>%
               # finter potential event ends to low_count years
               filter(low_count) %>%
               select(population, year) %>%
               rename(end_year = year), by = "population", relationship = "many-to-many") %>%
  # event length 1-5 years (inclusive)
  filter(start_year <= end_year,
         start_year >= end_year - 5) %>%
  group_by(population, start_year) %>%
  # pick shortest event which meets above criteria
  summarise(end_year = min(end_year),
            .groups = "drop") %>%
  left_join(pop_year_bd %>%
              select(population,
                     year,
                     adult_count_visual), by = "population", relationship = "many-to-many") %>%
  group_by(population, start_year, end_year) %>%
  summarize(adult_ves_before = median(adult_count_visual[year <= start_year], na.rm = TRUE),
            adult_ves_after = median(adult_count_visual[year >= end_year], na.rm = TRUE),
            .groups = "drop") %>%
  mutate(adult_ves_before = if_else(is.na(adult_ves_before), 0, adult_ves_before),
         adult_ves_after = if_else(is.na(adult_ves_after), 0, adult_ves_after),
         adult_ves_drop_ratio = adult_ves_after / adult_ves_before,
         epi_criteria = adult_ves_drop_ratio <= 0.1) %>%
  # filter to minimum 90% population loss over event
  filter(epi_criteria) %>%
  # select 1st event which meets all above criteria
  arrange(population, start_year) %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup()

# bring together with timeseries and classify
pop_year_class = epi_thresholds %>%
  left_join(epi_events, by = c("population")) %>%
  group_by(population) %>%
  mutate(median_prev = median(adult_bd_prevalence, na.rm = TRUE),
         low_count_f = zoo::na.locf(low_count, na.rm = FALSE)) %>%
  ungroup() %>%
  mutate(
    res_class = case_when(
      is.na(start_year) & median_prev >= 0.5 ~ "3-post",
      is.na(start_year) & median_prev < 0.5 ~ "1-naive",
      year < start_year ~ "1-naive",
      year >= start_year & year <= end_year ~ "2-epizootic",
      year > end_year ~ "3-post"),
    res_class_post = case_when(
      res_class == "1-naive" ~ "1-naive",
      res_class == "2-epizootic" ~ "2-epizootic",
      res_class == "3-post" & !low_count_f ~ "3b-recovering",
      res_class == "3-post" & low_count_f ~ "3a-persisting",
      .default = NA_character_
    )) %>%
  group_by(population) %>%
  mutate(res_class_post = zoo::na.locf(res_class_post, fromLast = TRUE, na.rm = FALSE)) %>%
  ungroup()

head(pop_year_class)

```

# Visualization of Classification

Interpreting plot:

  - VES, CMR, & Bd Load on log-scale
  - Bd Prevalence scaled by factor of 10x
  - Horizontal lines indicate thresholds for selection criteria
    - green: threshold for Bd prevalence (0.95)
    - blue: threshold for Bd load (24000)
    - orange: VES & CMR threshold of 20

```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show visualization code"
#| fig-height: 10
#| fig-width: 10

ggplot(pop_year_class, aes(x = year)) +
  geom_point(aes(y = log(adult_count_visual + 1), color = "log(VES + 1)")) +
  geom_line(aes(y = log(adult_count_visual + 1), color = "log(VES + 1)")) +
  geom_point(aes(y = log(adult_count_cmr + 1), color = "log(CMR + 1)")) +
  geom_line(aes(y = log(adult_count_cmr + 1), color = "log(CMR + 1)")) +
  geom_point(aes(y = adult_bd_prevalence * 10, color = "Bd Prev (x10)")) +
  geom_line(aes(y = adult_bd_prevalence * 10, color = "Bd Prev (x10)")) +
  geom_point(aes(y = log(adult_positive_bd_load_median + 1), color = "log(Bd Load + 1)")) +
  geom_line(aes(y = log(adult_positive_bd_load_median + 1), color = "log(Bd Load + 1)")) +
  geom_text(data = pop_adult_swab_counts, x = 2009, y = 15, size = 3, aes(label = paste0(adult_swab_n, " swabs"))) +
  geom_tile(data = pop_year_class,
            aes(y = -1, fill = res_class_post), height = 1) +
  facet_wrap(population ~ .) +
  geom_hline(yintercept = 0.95 * 10, linetype = "dashed", color = "green") +
  geom_hline(yintercept = log(24000), linetype = "dashed", color = "blue") +
  geom_hline(yintercept = log(20), linetype = "dashed", color = "orange") +
  scale_color_manual(values = c("log(VES + 1)" = "orange",
                                "log(CMR + 1)" = "red",
                                "Bd Prev (x10)" = "green",
                                "log(Bd Load + 1)" = "blue")) +
  scale_fill_manual(values = c("1-naive" = "#a5f",
                               "2-epizootic" = "#f5a",
                               "3a-persisting" = "#5af",
                               "3b-recovering" = "#5fa")) +  # Replace with your actual class color keys
  labs(color = "Timeseries", fill = "Resillience class") +
  ggtitle("Time series and resillience trajectory classification (from adults only)")
```

# Discussion & Next Steps

  - Review population/year classifications for agreement with site history and/or issues
    - Expect: all Yosemite post-epizootic at start of swabbing, except for Galiston (Epizootic ~2020)
    - Compare with SEKI outbreak map
  - Consider refining persisting/recovering criteria to include hysteresis or lag
    - Is it ok for a site to be transiently "recovering" between periods of persisting? How many seasons of evidence needed?
  - Consider which classes to use for Rana muscosa analysis ("persisting" & "recovering", or simple "post-epizootic")
    - R. muscosa -- is Mulky the site with post-epizootic swab data?
  - Model Bd with life stage across resilience trajectory classes, for Rana sierrae & Rana muscosa
