---
title: "Size vs. Bd modeling: Panam√° preliminary results"
author: Cob Staines
date: 2025-08-20
format:
  html:
    toc: true
df-print: kable
bibliography: references.bib
csl: ecology.csl
---

## Setup
```{r}
#| eval: true
#| output: false
#| code-fold: true
#| code-summary: "Show setup code"

# setup
librarian::shelf(tidyverse, dbplyr, here, janitor, RPostgres, DBI, RIBBiTR-BII/ribbitrrr, brms, loo, bayesplot, tidybayes, ggplot2)

## Connect to DB
dbcon <- hopToDB("ribbitr")

# load populations
data_pop = read.csv(here("data", "sn_site_pop_2_2025-09-19.csv")) %>%
  rename(population = pop_id) %>%
  mutate(population = if_else(!is.na(population), paste0(as.character(population), "_pop"), NA_character_),
         population = if_else(is.na(population), as.character(site), as.character(population)))

# table pointers
db_bd = tbl(dbcon, Id("survey_data", "bd_qpcr_results"))
db_sample = tbl(dbcon, Id("survey_data", "sample"))
db_capture = tbl(dbcon, Id("survey_data", "capture"))
db_ves = tbl(dbcon, Id("survey_data", "ves"))
db_survey = tbl(dbcon, Id("survey_data", "survey"))
db_visit = tbl(dbcon, Id("survey_data", "visit"))
db_site = tbl(dbcon, Id("survey_data", "site"))
db_region = tbl(dbcon, Id("survey_data", "region"))
db_country = tbl(dbcon, Id("survey_data", "country"))
db_hist = tbl(dbcon, Id("survey_data", "site_history"))

bd_sample = db_sample %>%
  right_join(db_capture, by = "capture_id") %>%
  left_join(db_survey, by = "survey_id") %>%
  left_join(db_visit, by = "visit_id") %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  left_join(db_country, by = "country_id") %>%
  filter(sample_type == "bd")
```

# define functions
```{r}
# fuzzy grouping for identifying survey periods in time
fuzzy_grouping = function(x, delta){
  # Make groups of x if differences are less than or equal to delta
  # 
  # Parameters
  # ----------
  # x : array of values to be grouped
  # delta : difference in value that defines a group
  
  
  if(length(x) > 1){
    
    run_ind = diff(x) <= delta
    grouping = array(NA, dim=length(run_ind + 1))
    grouping[1] = 1
    for(i in 1:length(run_ind)){
      
      if(run_ind[i] == FALSE | is.na(run_ind[i])){
        grouping[i + 1] = grouping[i] + 1
      }
      else{
        grouping[i + 1] = grouping[i]
      }
      
    }
  } else{
    grouping = 1
  }
  
  return(grouping)

}

# binomial confidence interval
wilson_ci = function(x, n, conf.level = 0.95) {
  p_hat <- x / n
  z <- qnorm(1 - (1 - conf.level) / 2)
  
  denominator <- 1 + (z^2 / n)
  centre_adjusted_probability <- p_hat + (z^2 / (2 * n))
  adjusted_standard_deviation <- sqrt((p_hat * (1 - p_hat) / n) + (z^2 / (4 * n^2)))
  
  lower_bound <- (centre_adjusted_probability - z * adjusted_standard_deviation) / denominator
  upper_bound <- (centre_adjusted_probability + z * adjusted_standard_deviation) / denominator
  
  return(c(lower_bound = lower_bound, upper_bound = upper_bound))
}

wilson_ci_lower = function(x, n, conf.level = 0.95) {
  ws = wilson_ci(x, n, conf.level)
  return(ws[1])
}

wilson_ci_upper = function(x, n, conf.level = 0.95) {
  ws = wilson_ci(x, n, conf.level)
  return(ws[2])
}

# normal confidence interval
normal_ci = function(x, conf.level = 0.95) {
  n <- length(x)
  mean_x <- mean(x)
  sd_x <- sd(x)
  
  alpha <- 1 - conf.level
  t_value <- qt(1 - alpha/2, df = n - 1)
  margin_error <- t_value * sd_x / sqrt(n)
  
  lower <- mean_x - margin_error
  upper <- mean_x + margin_error
  
  return(c(lower_bound = lower, upper_bound = upper))
}

normal_ci_lower = function(x, conf.level = 0.95) {
  no = normal_ci(x, conf.level)
  return(no[1])
}

normal_ci_upper = function(x, conf.level = 0.95) {
  no = normal_ci(x, conf.level)
  return(no[2])
}


```

## Methods

### Data selection & classification

0. Beginning with all Rana muscosa & Rana Sierrae data, grouped by population
1. Filter out post-translocation data
2. Population selection criteria:
  a. minimum 15 swabbed subadult and adult
  b. minimum 3 survey years
3. Classify by:
  a. Bd Naive: low (or no detected) Bd prevalence & load, high population
  b. Epizootic: high Bd prevalence & load, followed by low population
  c. Post-Epizootic: mid Bd prevalence & load
    i. Persistant (low population)
    ii. Recovering (high population)
4. Review:
  a. Yosemite all post-epizootic at start of swabbing, except for Galiston (Epizootic ~2020)
  b. Compare with SEKI outbreak map fro agreement
  c. R. muscosa -- is Mulki the only post-epizootic site? If so, skip this analysis for R muscosa
  
```{r}
#| eval: true
#| warning: false
#| code-fold: true
#| code-summary: "Show data collection code"

# identify populations
bd_population = bd_sample %>%
  filter(country == "usa",
         region == "california",
         life_stage != "tadpole",
         !is.na(taxon_capture %in% c("rana_muscosa", "rana_sierrae"))) %>%
  left_join(data_pop, by = "site", copy = TRUE) %>%
  mutate(tax_pop = paste0(taxon_capture, "_", population),
         year = year(date),
         life_stage_simple = life_stage,
         life_stage_simple = case_when(
           is.na(svl_mm) ~ life_stage,
           (svl_mm >= 40) ~ "adult",
           (svl_mm < 40) ~ "subadult",
           .default = life_stage))

# identify translocation release events by population
release_events = db_hist %>%
  left_join(db_site, by = "site_id") %>%
  left_join(db_region, by = "region_id") %>%
  filter(region == "california",
         treatment_type %in% c("translocation_release", "reintroduction_release")) %>%
  collect() %>%
  left_join(data_pop, by = "site") %>%
  mutate(year = year(treatment_date),
         release_event = TRUE) %>%
  select(population,
         year,
         release_event) %>%
  distinct()

first_release_events =  release_events %>%
  group_by(population) %>%
  summarise(first_release_year = min(year),
            .groups = "drop")


# mask for populations/years after a release event
post_release_mask = expand_grid(unique(first_release_events$population),
                       seq(min(first_release_events$first_release_year), 2025)) %>%
  rename(population = 1,
         year = 2) %>%
  left_join(first_release_events, by = "population") %>%
  filter(year >= first_release_year) %>%
  select(-first_release_year)

# selection criteria for populations
## - 3 years of sampling
## - at least 15 each adult and subadult per population



bd_population_valid = bd_population %>%
  collect() %>%
  anti_join(post_release_mask, by = c("population", "year")) %>%
  group_by(population) %>%
  summarise(n_years = n_distinct(year),
            n_adult = sum(life_stage_simple == "adult"),
            n_subadult = sum(life_stage_simple == "subadult"),
            .groups = "drop") %>%
  filter(n_years >= 3,
         n_adult >= 15,
         n_subadult >= 15)

# pop_year_valid = bd_population %>%
#   distinct(population, year) %>%
#   anti_join(post_release_mask, by = c("population", "year"))
#   filter(population %in% bd_population_valid$population) %>%
#   collect() %>%
#   left_join(first_release_events, by = "population") %>%
#   filter(is.na(first_release_year) | !(year >= first_release_year)) %>%
#   select(population, year)
  
bd_site_valid = data_pop %>%
  filter(population %in% bd_population_valid$population)

bd_capture_valid = bd_population %>%
  anti_join(post_release_mask, by = c("population", "year"), copy = TRUE)

# all years of data for valid pops
year_valid = bd_capture_valid %>%
  distinct(population, year) %>%
  collect()

# all population - year combinations
pop_year = expand_grid(bd_population_valid$population,
                       unique(year_valid$year)) %>%
  rename(population = 1,
         year = 2)

# pass on to pop year
pop_year_tx = pop_year %>%
  left_join(first_release_events, by = c("population")) %>%
  arrange(population, year)

```

# Calculate adult abundance indicators
```{r}
# sites of interest
site_oi = db_site %>%
  filter(site %in% bd_site_valid$site)

# visits of interest
visit_oi = db_visit %>%
  left_join(site_oi, by = "site_id") %>%
  mutate(year = year(date)) %>%
  filter(visit_status == "suitable",
         year %in% year_valid$year) %>%
  select(visit_id,
         site,
         site_id,
         year,
         date,
         comments_visit) %>%
  collect() %>%
  left_join(data_pop, by = "site") %>%
  anti_join(post_release_mask, by = c("population", "year")) %>%
  arrange(population,
          date) %>%
  group_by(population, year) %>%
  mutate(survey_period = fuzzy_grouping(as.integer(date), 7)) %>% # consider surveys within a rolling 7 days to be within the same survey period
  ungroup()

# join with survey table
survey_oi = db_survey %>%
  filter(visit_id %in% visit_oi$visit_id,
         detection_type %in% c("capture", "visual")) %>%
  select(detection_type,
         detection_subtype,
         survey_quality,
         description,
         comments_survey,
         number_observers,
         survey_id,
         visit_id) %>%
  collect() %>%
  mutate(detection_type = ifelse(detection_type == "capture",
                                 detection_subtype,
                                 detection_type)) %>%
  select(-detection_subtype) %>%
  right_join(visit_oi, by = "visit_id") %>%
  arrange(site,
          date,
          survey_period)

# # Survey periods of interest
# 
# Selection criteria when more than 1 survey period available for a given & year: Use survey with max count (independent for CMR and Visual)

# adult frog abundance

# ## visual
# visual detection per survey period (1 survey per survey period)
# 
# ## cmr
# cmr detection within survey period (across all surveys in survey period)

# visual data pull
data_visual = survey_oi %>%
  filter(detection_type == "visual") %>%
  select(population,
         site,
         date,
         survey_period,
         year,
         survey_id,
         visit_id,
         detection_type,
         comments_survey,
         comments_visit) %>%
  left_join(db_ves %>%
               filter(life_stage == "adult",
                      visual_animal_state != "dead") %>%
               select(count_ves,
                      ves_id,
                      survey_id) %>%
               collect(), by = "survey_id") %>%
  mutate(count_ves = ifelse(is.na(count_ves), 0, count_ves))

# visual abundance calc
abundance_visual = data_visual %>%
  group_by(population,
           year,
           date,
           survey_period
           ) %>%
  rename(date_ves = date) %>%
  summarise(adult_count_visual = sum(count_ves),
            .groups = "drop") %>%
  arrange(population, year, desc(adult_count_visual)) %>%
  group_by(population,
           year) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-survey_period)

# cmr data pull
data_cmr = survey_oi %>%
  filter(detection_type == "cmr") %>%
  select(population,
         site,
         date,
         survey_period,
         year,
         survey_id,
         visit_id,
         detection_type,
         comments_survey,
         comments_visit) %>%
  inner_join(db_capture %>%
               filter(life_stage == "adult",
                      capture_animal_state != "dead") %>%
               select(cmr_id,
                      capture_id,
                      survey_id,
                      life_stage,
                      capture_animal_state,
                      comments_capture) %>%
               collect(), by = "survey_id")

# cmr abundance calc
abundance_cmr = data_cmr %>%
  group_by(population,
           year,
           survey_period) %>%
  summarise(date_cmr_first = first(date),
            cmr_days = n_distinct(date),
            adult_count_cmr = n_distinct(cmr_id),
            .groups = "drop") %>%
  arrange(population, year, desc(adult_count_cmr)) %>%
  group_by(population,
           year) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-survey_period)

# join visual and cmr abundance data
abundance_stats = abundance_visual %>%
  full_join(abundance_cmr, by = c("population", "year"))

# join with pop_year_tx
pop_year_ab = pop_year_tx %>%
  left_join(abundance_stats, by = c("population", "year"))

```


# Calculate adult Bd stats
```{r}
bd_stats = bd_capture_valid %>%
  filter(life_stage_simple == "adult") %>%
  inner_join(db_bd %>%
              filter(!is.na(detected)) %>%
              group_by(sample_id) %>%
              summarise(bd_swab_count = n(),
                        bd_detected = any(detected),
                        bd_mean_its1_copies_per_swab = mean(bd_its1_copies_per_swab),
                        .groups = "drop"),
             by = "sample_id") %>%
  collect() %>%
  group_by(population,
           year) %>%
  summarise(adult_swab_n = n(),
            adult_bd_prevalence = sum(bd_detected) / n(),
            adult_bd_prevalence_ci_lower = wilson_ci_lower(sum(bd_detected), n(), conf.level = 0.95),
            adult_bd_prevalence_ci_upper = wilson_ci_upper(sum(bd_detected), n(), conf.level = 0.95),
            adult_positive_bd_load_median = median(bd_mean_its1_copies_per_swab[bd_detected]),
            adult_positive_bd_load_ci_lower = exp(normal_ci_lower(log(bd_mean_its1_copies_per_swab[bd_detected]), conf.level = 0.95)),
            adult_positive_bd_load_ci_upper = exp(normal_ci_upper(log(bd_mean_its1_copies_per_swab[bd_detected]), conf.level = 0.95)),
            adult_bd_load_mean = mean(bd_mean_its1_copies_per_swab),
            .groups = "drop")

# join with pop_year_ab
pop_year_bd = pop_year_ab %>%
  left_join(bd_stats, by = c("population", "year")) %>%
  arrange(population, year)

```

# visulaize to understand what kinds of patterns we want to ID
# classification criteria
```{r, fig.width=10, fig.height=10}

pop_adult_swab_counts = pop_year_bd %>%
  group_by(population) %>%
  summarize(adult_swab_n = sum(adult_swab_n, na.rm = TRUE))

epi_class = pop_year_bd %>%
  mutate(epi_prev = adult_bd_prevalence >= 0.7,
         epi_load = adult_positive_bd_load_median >= 15000) %>%
  group_by(population) %>%
  arrange(year) %>%
  mutate(
         # Get next two adult_bd_prevalence values skipping NA
         next1 = lead(adult_bd_prevalence, 1),
         next2 = lead(adult_bd_prevalence, 2),
         next3 = lead(adult_bd_prevalence, 3),
         next4 = lead(adult_bd_prevalence, 4)) %>%
  rowwise() %>%
  mutate(transient = mean(c_across(c(next1, next2, next3, next4)), na.rm = TRUE) < 0.1) %>%
  ungroup() %>%
  arrange(population, year) %>%
  mutate(epizootic = (epi_load | epi_prev) & !(transient %in% TRUE)) %>%
  select(population, year, epizootic)

epi_year = pop_year_bd %>%
  left_join(epi_class, by = c("population", "year")) %>%
  filter(epizootic) %>%
  select(population, year) %>%
  mutate(epi_potential = TRUE)

first_epi_year = epi_year %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(population, year) %>%
  rename(first_epi_year = year)

first_bd_year = pop_year_bd %>%
  filter(!is.na(adult_bd_prevalence)) %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(first_bd_ves_lt10 = adult_count_visual < 10) %>%
  select(population, year, first_bd_ves_lt10) %>%
  rename(first_bd_year = year)

pop_year_class = pop_year_bd %>%
  left_join(first_epi_year, by = c("population")) %>%
  left_join(first_bd_year, by = c("population")) %>%
  left_join(epi_year, by = c("population", "year")) %>%
  mutate(
    epi_potential = if_else(is.na(epi_potential), FALSE, epi_potential),
    res_class = case_when(
      (first_epi_year == first_bd_year) & first_bd_ves_lt10 ~ "post",
      year < first_epi_year ~ "naive",
      year == first_epi_year ~ "epizootic",
      year > first_epi_year ~ "post",
      .default = "naive")) %>%
  mutate(last1 = lag(res_class, 1),
         res_class = if_else(epi_potential & last1 == "epizootic", "epizootic", res_class)) %>%
  mutate(last1 = lag(res_class, 1),
         res_class = if_else(epi_potential & last1 == "epizootic", "epizootic", res_class)) %>%
  mutate(last1 = lag(res_class, 1),
         res_class = if_else(epi_potential & last1 == "epizootic", "epizootic", res_class)) %>%
  mutate(last1 = lag(res_class, 1),
         res_class = if_else(epi_potential & last1 == "epizootic", "epizootic", res_class))

# epizootic: 1st time both
#   a) positive Bd load > 10k (log load > 9.21)
#   b) prevalence > 0.5
#   c) ves & cmr 3 year average > before than after
# then buffered by where only Bd load is > 10k
ggplot(pop_year_class, aes(x = year)) +
  geom_point(aes(y = log(adult_count_visual + 1), color = "VES")) +
  geom_line(aes(y = log(adult_count_visual + 1), color = "VES")) +
  geom_point(aes(y = log(adult_count_cmr + 1), color = "CMR")) +
  geom_line(aes(y = log(adult_count_cmr + 1), color = "CMR")) +
  geom_point(aes(y = adult_bd_prevalence * 10, color = "Bd Prev")) +
  geom_line(aes(y = adult_bd_prevalence * 10, color = "Bd Prev")) +
  geom_point(aes(y = log(adult_positive_bd_load_median + 1), color = "Bd Load")) +
  geom_line(aes(y = log(adult_positive_bd_load_median + 1), color = "Bd Load")) +
  geom_text(data = pop_adult_swab_counts, x = 2015, y = 15, aes(label = adult_swab_n)) +
  geom_tile(data = pop_year_class,
            aes(y = -0.5, fill = res_class), height = 0.6) +
  facet_wrap(population ~ .) +
  geom_hline(yintercept = 0.7 * 10, linetype = "dashed", color = "green") +
  geom_hline(yintercept = log(15000), linetype = "dashed", color = "blue") +
  geom_hline(yintercept = log(10), linetype = "dashed", color = "orange") +
  scale_color_manual(values = c("VES" = "orange",
                                "CMR" = "red",
                                "Bd Prev" = "green",
                                "Bd Load" = "blue")) +
  labs(color = "Timeseries")


```

# criteria 2
```{r, fig.width=10, fig.height=10}

pop_adult_swab_counts = pop_year_bd %>%
  group_by(population) %>%
  summarize(adult_swab_n = sum(adult_swab_n, na.rm = TRUE))

epi_class = pop_year_bd %>%
  mutate(epi_prev = adult_bd_prevalence >= 0.8,
         epi_load = adult_positive_bd_load_median >= 15000) %>%
  arrange(population, year) %>%
  mutate(epizootic = (epi_load | epi_prev)) %>%
  select(population, year, epizootic)

epi_year = pop_year_bd %>%
  left_join(epi_class, by = c("population", "year")) %>%
  filter(epizootic) %>%
  select(population, year) %>%
  mutate(epi_potential = TRUE)

first_epi_year = epi_year %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(population, year) %>%
  rename(first_epi_year = year)

first_bd_year = pop_year_bd %>%
  filter(!is.na(adult_bd_prevalence)) %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  mutate(first_bd_ves_lt10 = adult_count_visual < 10) %>%
  select(population, year, first_bd_ves_lt10) %>%
  rename(first_bd_year = year)

epi_events = pop_year_bd %>%
  left_join(epi_year, by = c("population", "year")) %>%
  mutate(
    epi_potential = if_else(is.na(epi_potential) & !is.na(adult_bd_prevalence), FALSE, epi_potential),
    not_false = is.na(epi_potential) | epi_potential == TRUE
  ) %>%
  arrange(population, year) %>%
  group_by(population) %>%
  mutate(
    run_id = {
      rle_vals <- rle(epi_potential)
      rep(seq_along(rle_vals$lengths), rle_vals$lengths)
    }
  ) %>%
  filter(epi_potential) %>%
  group_by(population, run_id) %>%
  filter(any(epi_potential == TRUE, na.rm = TRUE)) %>%
  summarise(
    start_year = min(year),
    end_year = max(year),
    .groups = "drop"
  ) %>%
  left_join(pop_year_bd %>%
              select(population,
                     year,
                     adult_count_visual), by = "population", relationship = "many-to-many") %>%
  group_by(population, start_year, end_year) %>%
  summarize(adult_ves_before = median(adult_count_visual[year <= start_year], na.rm = TRUE),
            adult_ves_after = median(adult_count_visual[year >= end_year], na.rm = TRUE),
            .groups = "drop") %>%
  mutate(adult_ves_before = if_else(is.na(adult_ves_before), 0, adult_ves_before),
         adult_ves_after = if_else(is.na(adult_ves_after), 0, adult_ves_after),
         adult_ves_drop = adult_ves_before - adult_ves_after) %>%
  filter(adult_ves_drop >= 30) %>%
  arrange(population, start_year) %>%
  group_by(population) %>%
  slice_head(n = 1) %>%
  ungroup()


pop_year_class = pop_year_bd %>%
  left_join(first_epi_year, by = c("population")) %>%
  left_join(first_bd_year, by = c("population")) %>%
  left_join(epi_events, by = c("population")) %>%
  group_by(population) %>%
  mutate(median_prev = median(adult_bd_prevalence, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(
    res_class = case_when(
      is.na(start_year) & median_prev >= 0.5 ~ "post",
      is.na(start_year) & median_prev < 0.5 ~ "naive",
      year < start_year ~ "naive",
      year >= start_year & year <= end_year ~ "epizootic",
      year > start_year ~ "post"))

# epizootic: 1st time both
#   a) positive Bd load > 10k (log load > 9.21)
#   b) prevalence > 0.5
#   c) ves & cmr 3 year average > before than after
# then buffered by where only Bd load is > 10k
ggplot(pop_year_class, aes(x = year)) +
  geom_point(aes(y = log(adult_count_visual + 1), color = "VES")) +
  geom_line(aes(y = log(adult_count_visual + 1), color = "VES")) +
  geom_point(aes(y = log(adult_count_cmr + 1), color = "CMR")) +
  geom_line(aes(y = log(adult_count_cmr + 1), color = "CMR")) +
  geom_point(aes(y = adult_bd_prevalence * 10, color = "Bd Prev")) +
  geom_line(aes(y = adult_bd_prevalence * 10, color = "Bd Prev")) +
  geom_point(aes(y = log(adult_positive_bd_load_median + 1), color = "Bd Load")) +
  geom_line(aes(y = log(adult_positive_bd_load_median + 1), color = "Bd Load")) +
  geom_point(data = epi_events, aes(x = start_year, y = log(1 + adult_ves_drop)), color = "purple") +
  geom_text(data = pop_adult_swab_counts, x = 2015, y = 15, aes(label = adult_swab_n)) +
  geom_tile(data = pop_year_class,
            aes(y = -0.5, fill = res_class), height = 0.6) +
  facet_wrap(population ~ .) +
  geom_hline(yintercept = 0.8 * 10, linetype = "dashed", color = "green") +
  geom_hline(yintercept = log(15000), linetype = "dashed", color = "blue") +
  geom_hline(yintercept = log(10), linetype = "dashed", color = "orange") +
  geom_hline(yintercept = log(30), linetype = "dashed", color = "purple") +
  scale_color_manual(values = c("VES" = "orange",
                                "CMR" = "red",
                                "Bd Prev" = "green",
                                "Bd Load" = "blue")) +
  labs(color = "Timeseries")


```